
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model BlacklistedToken
 * 
 */
export type BlacklistedToken = $Result.DefaultSelection<Prisma.$BlacklistedTokenPayload>
/**
 * Model HealthCenter
 * 
 */
export type HealthCenter = $Result.DefaultSelection<Prisma.$HealthCenterPayload>
/**
 * Model Education
 * 
 */
export type Education = $Result.DefaultSelection<Prisma.$EducationPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model EducationImage
 * 
 */
export type EducationImage = $Result.DefaultSelection<Prisma.$EducationImagePayload>
/**
 * Model Video
 * 
 */
export type Video = $Result.DefaultSelection<Prisma.$VideoPayload>
/**
 * Model MosquitoImage
 * 
 */
export type MosquitoImage = $Result.DefaultSelection<Prisma.$MosquitoImagePayload>
/**
 * Model Mosquito
 * 
 */
export type Mosquito = $Result.DefaultSelection<Prisma.$MosquitoPayload>
/**
 * Model Survey
 * 
 */
export type Survey = $Result.DefaultSelection<Prisma.$SurveyPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  TENAGA_PUSKESMAS: 'TENAGA_PUSKESMAS'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.blacklistedToken`: Exposes CRUD operations for the **BlacklistedToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlacklistedTokens
    * const blacklistedTokens = await prisma.blacklistedToken.findMany()
    * ```
    */
  get blacklistedToken(): Prisma.BlacklistedTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.healthCenter`: Exposes CRUD operations for the **HealthCenter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HealthCenters
    * const healthCenters = await prisma.healthCenter.findMany()
    * ```
    */
  get healthCenter(): Prisma.HealthCenterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.educationImage`: Exposes CRUD operations for the **EducationImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EducationImages
    * const educationImages = await prisma.educationImage.findMany()
    * ```
    */
  get educationImage(): Prisma.EducationImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.video`: Exposes CRUD operations for the **Video** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videos
    * const videos = await prisma.video.findMany()
    * ```
    */
  get video(): Prisma.VideoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mosquitoImage`: Exposes CRUD operations for the **MosquitoImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MosquitoImages
    * const mosquitoImages = await prisma.mosquitoImage.findMany()
    * ```
    */
  get mosquitoImage(): Prisma.MosquitoImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mosquito`: Exposes CRUD operations for the **Mosquito** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mosquitos
    * const mosquitos = await prisma.mosquito.findMany()
    * ```
    */
  get mosquito(): Prisma.MosquitoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.survey`: Exposes CRUD operations for the **Survey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Surveys
    * const surveys = await prisma.survey.findMany()
    * ```
    */
  get survey(): Prisma.SurveyDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    BlacklistedToken: 'BlacklistedToken',
    HealthCenter: 'HealthCenter',
    Education: 'Education',
    Image: 'Image',
    EducationImage: 'EducationImage',
    Video: 'Video',
    MosquitoImage: 'MosquitoImage',
    Mosquito: 'Mosquito',
    Survey: 'Survey'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "blacklistedToken" | "healthCenter" | "education" | "image" | "educationImage" | "video" | "mosquitoImage" | "mosquito" | "survey"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      BlacklistedToken: {
        payload: Prisma.$BlacklistedTokenPayload<ExtArgs>
        fields: Prisma.BlacklistedTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlacklistedTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistedTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlacklistedTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistedTokenPayload>
          }
          findFirst: {
            args: Prisma.BlacklistedTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistedTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlacklistedTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistedTokenPayload>
          }
          findMany: {
            args: Prisma.BlacklistedTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistedTokenPayload>[]
          }
          create: {
            args: Prisma.BlacklistedTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistedTokenPayload>
          }
          createMany: {
            args: Prisma.BlacklistedTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BlacklistedTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistedTokenPayload>
          }
          update: {
            args: Prisma.BlacklistedTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistedTokenPayload>
          }
          deleteMany: {
            args: Prisma.BlacklistedTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BlacklistedTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BlacklistedTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BlacklistedTokenPayload>
          }
          aggregate: {
            args: Prisma.BlacklistedTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBlacklistedToken>
          }
          groupBy: {
            args: Prisma.BlacklistedTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<BlacklistedTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlacklistedTokenCountArgs<ExtArgs>
            result: $Utils.Optional<BlacklistedTokenCountAggregateOutputType> | number
          }
        }
      }
      HealthCenter: {
        payload: Prisma.$HealthCenterPayload<ExtArgs>
        fields: Prisma.HealthCenterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HealthCenterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCenterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HealthCenterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCenterPayload>
          }
          findFirst: {
            args: Prisma.HealthCenterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCenterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HealthCenterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCenterPayload>
          }
          findMany: {
            args: Prisma.HealthCenterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCenterPayload>[]
          }
          create: {
            args: Prisma.HealthCenterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCenterPayload>
          }
          createMany: {
            args: Prisma.HealthCenterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HealthCenterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCenterPayload>
          }
          update: {
            args: Prisma.HealthCenterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCenterPayload>
          }
          deleteMany: {
            args: Prisma.HealthCenterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HealthCenterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HealthCenterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCenterPayload>
          }
          aggregate: {
            args: Prisma.HealthCenterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHealthCenter>
          }
          groupBy: {
            args: Prisma.HealthCenterGroupByArgs<ExtArgs>
            result: $Utils.Optional<HealthCenterGroupByOutputType>[]
          }
          count: {
            args: Prisma.HealthCenterCountArgs<ExtArgs>
            result: $Utils.Optional<HealthCenterCountAggregateOutputType> | number
          }
        }
      }
      Education: {
        payload: Prisma.$EducationPayload<ExtArgs>
        fields: Prisma.EducationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EducationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EducationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findFirst: {
            args: Prisma.EducationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EducationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findMany: {
            args: Prisma.EducationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          create: {
            args: Prisma.EducationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          createMany: {
            args: Prisma.EducationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EducationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          update: {
            args: Prisma.EducationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          deleteMany: {
            args: Prisma.EducationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EducationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EducationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          aggregate: {
            args: Prisma.EducationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEducation>
          }
          groupBy: {
            args: Prisma.EducationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EducationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EducationCountArgs<ExtArgs>
            result: $Utils.Optional<EducationCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      EducationImage: {
        payload: Prisma.$EducationImagePayload<ExtArgs>
        fields: Prisma.EducationImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EducationImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EducationImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationImagePayload>
          }
          findFirst: {
            args: Prisma.EducationImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EducationImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationImagePayload>
          }
          findMany: {
            args: Prisma.EducationImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationImagePayload>[]
          }
          create: {
            args: Prisma.EducationImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationImagePayload>
          }
          createMany: {
            args: Prisma.EducationImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EducationImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationImagePayload>
          }
          update: {
            args: Prisma.EducationImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationImagePayload>
          }
          deleteMany: {
            args: Prisma.EducationImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EducationImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EducationImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationImagePayload>
          }
          aggregate: {
            args: Prisma.EducationImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEducationImage>
          }
          groupBy: {
            args: Prisma.EducationImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<EducationImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.EducationImageCountArgs<ExtArgs>
            result: $Utils.Optional<EducationImageCountAggregateOutputType> | number
          }
        }
      }
      Video: {
        payload: Prisma.$VideoPayload<ExtArgs>
        fields: Prisma.VideoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VideoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findFirst: {
            args: Prisma.VideoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findMany: {
            args: Prisma.VideoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          create: {
            args: Prisma.VideoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          createMany: {
            args: Prisma.VideoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VideoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          update: {
            args: Prisma.VideoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          deleteMany: {
            args: Prisma.VideoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VideoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VideoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          aggregate: {
            args: Prisma.VideoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVideo>
          }
          groupBy: {
            args: Prisma.VideoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoCountArgs<ExtArgs>
            result: $Utils.Optional<VideoCountAggregateOutputType> | number
          }
        }
      }
      MosquitoImage: {
        payload: Prisma.$MosquitoImagePayload<ExtArgs>
        fields: Prisma.MosquitoImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MosquitoImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MosquitoImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoImagePayload>
          }
          findFirst: {
            args: Prisma.MosquitoImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MosquitoImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoImagePayload>
          }
          findMany: {
            args: Prisma.MosquitoImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoImagePayload>[]
          }
          create: {
            args: Prisma.MosquitoImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoImagePayload>
          }
          createMany: {
            args: Prisma.MosquitoImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MosquitoImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoImagePayload>
          }
          update: {
            args: Prisma.MosquitoImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoImagePayload>
          }
          deleteMany: {
            args: Prisma.MosquitoImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MosquitoImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MosquitoImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoImagePayload>
          }
          aggregate: {
            args: Prisma.MosquitoImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMosquitoImage>
          }
          groupBy: {
            args: Prisma.MosquitoImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MosquitoImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MosquitoImageCountArgs<ExtArgs>
            result: $Utils.Optional<MosquitoImageCountAggregateOutputType> | number
          }
        }
      }
      Mosquito: {
        payload: Prisma.$MosquitoPayload<ExtArgs>
        fields: Prisma.MosquitoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MosquitoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MosquitoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoPayload>
          }
          findFirst: {
            args: Prisma.MosquitoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MosquitoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoPayload>
          }
          findMany: {
            args: Prisma.MosquitoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoPayload>[]
          }
          create: {
            args: Prisma.MosquitoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoPayload>
          }
          createMany: {
            args: Prisma.MosquitoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MosquitoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoPayload>
          }
          update: {
            args: Prisma.MosquitoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoPayload>
          }
          deleteMany: {
            args: Prisma.MosquitoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MosquitoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MosquitoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MosquitoPayload>
          }
          aggregate: {
            args: Prisma.MosquitoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMosquito>
          }
          groupBy: {
            args: Prisma.MosquitoGroupByArgs<ExtArgs>
            result: $Utils.Optional<MosquitoGroupByOutputType>[]
          }
          count: {
            args: Prisma.MosquitoCountArgs<ExtArgs>
            result: $Utils.Optional<MosquitoCountAggregateOutputType> | number
          }
        }
      }
      Survey: {
        payload: Prisma.$SurveyPayload<ExtArgs>
        fields: Prisma.SurveyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurveyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurveyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          findFirst: {
            args: Prisma.SurveyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurveyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          findMany: {
            args: Prisma.SurveyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>[]
          }
          create: {
            args: Prisma.SurveyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          createMany: {
            args: Prisma.SurveyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SurveyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          update: {
            args: Prisma.SurveyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          deleteMany: {
            args: Prisma.SurveyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SurveyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SurveyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          aggregate: {
            args: Prisma.SurveyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurvey>
          }
          groupBy: {
            args: Prisma.SurveyGroupByArgs<ExtArgs>
            result: $Utils.Optional<SurveyGroupByOutputType>[]
          }
          count: {
            args: Prisma.SurveyCountArgs<ExtArgs>
            result: $Utils.Optional<SurveyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    blacklistedToken?: BlacklistedTokenOmit
    healthCenter?: HealthCenterOmit
    education?: EducationOmit
    image?: ImageOmit
    educationImage?: EducationImageOmit
    video?: VideoOmit
    mosquitoImage?: MosquitoImageOmit
    mosquito?: MosquitoOmit
    survey?: SurveyOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Survey: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Survey?: boolean | UserCountOutputTypeCountSurveyArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSurveyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyWhereInput
  }


  /**
   * Count Type HealthCenterCountOutputType
   */

  export type HealthCenterCountOutputType = {
    Survey: number
  }

  export type HealthCenterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Survey?: boolean | HealthCenterCountOutputTypeCountSurveyArgs
  }

  // Custom InputTypes
  /**
   * HealthCenterCountOutputType without action
   */
  export type HealthCenterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenterCountOutputType
     */
    select?: HealthCenterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HealthCenterCountOutputType without action
   */
  export type HealthCenterCountOutputTypeCountSurveyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyWhereInput
  }


  /**
   * Count Type EducationCountOutputType
   */

  export type EducationCountOutputType = {
    images: number
  }

  export type EducationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | EducationCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * EducationCountOutputType without action
   */
  export type EducationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationCountOutputType
     */
    select?: EducationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EducationCountOutputType without action
   */
  export type EducationCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationImageWhereInput
  }


  /**
   * Count Type ImageCountOutputType
   */

  export type ImageCountOutputType = {
    educations: number
    MosquitoImage: number
  }

  export type ImageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    educations?: boolean | ImageCountOutputTypeCountEducationsArgs
    MosquitoImage?: boolean | ImageCountOutputTypeCountMosquitoImageArgs
  }

  // Custom InputTypes
  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageCountOutputType
     */
    select?: ImageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeCountEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationImageWhereInput
  }

  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeCountMosquitoImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MosquitoImageWhereInput
  }


  /**
   * Count Type MosquitoCountOutputType
   */

  export type MosquitoCountOutputType = {
    images: number
  }

  export type MosquitoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | MosquitoCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * MosquitoCountOutputType without action
   */
  export type MosquitoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoCountOutputType
     */
    select?: MosquitoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MosquitoCountOutputType without action
   */
  export type MosquitoCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MosquitoImageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    email: string | null
    password: string | null
    status: boolean | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    email: string | null
    password: string | null
    status: boolean | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    name: number
    email: number
    password: number
    status: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    name?: true
    email?: true
    password?: true
    status?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    name?: true
    email?: true
    password?: true
    status?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    name?: true
    email?: true
    password?: true
    status?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    name: string | null
    email: string | null
    password: string
    status: boolean
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    status?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Survey?: boolean | User$SurveyArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    status?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "name" | "email" | "password" | "status" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Survey?: boolean | User$SurveyArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Survey: Prisma.$SurveyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      name: string | null
      email: string | null
      password: string
      status: boolean
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Survey<T extends User$SurveyArgs<ExtArgs> = {}>(args?: Subset<T, User$SurveyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.Survey
   */
  export type User$SurveyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    where?: SurveyWhereInput
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    cursor?: SurveyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model BlacklistedToken
   */

  export type AggregateBlacklistedToken = {
    _count: BlacklistedTokenCountAggregateOutputType | null
    _avg: BlacklistedTokenAvgAggregateOutputType | null
    _sum: BlacklistedTokenSumAggregateOutputType | null
    _min: BlacklistedTokenMinAggregateOutputType | null
    _max: BlacklistedTokenMaxAggregateOutputType | null
  }

  export type BlacklistedTokenAvgAggregateOutputType = {
    id: number | null
  }

  export type BlacklistedTokenSumAggregateOutputType = {
    id: number | null
  }

  export type BlacklistedTokenMinAggregateOutputType = {
    id: number | null
    token: string | null
    expiredAt: Date | null
    createdAt: Date | null
  }

  export type BlacklistedTokenMaxAggregateOutputType = {
    id: number | null
    token: string | null
    expiredAt: Date | null
    createdAt: Date | null
  }

  export type BlacklistedTokenCountAggregateOutputType = {
    id: number
    token: number
    expiredAt: number
    createdAt: number
    _all: number
  }


  export type BlacklistedTokenAvgAggregateInputType = {
    id?: true
  }

  export type BlacklistedTokenSumAggregateInputType = {
    id?: true
  }

  export type BlacklistedTokenMinAggregateInputType = {
    id?: true
    token?: true
    expiredAt?: true
    createdAt?: true
  }

  export type BlacklistedTokenMaxAggregateInputType = {
    id?: true
    token?: true
    expiredAt?: true
    createdAt?: true
  }

  export type BlacklistedTokenCountAggregateInputType = {
    id?: true
    token?: true
    expiredAt?: true
    createdAt?: true
    _all?: true
  }

  export type BlacklistedTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlacklistedToken to aggregate.
     */
    where?: BlacklistedTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlacklistedTokens to fetch.
     */
    orderBy?: BlacklistedTokenOrderByWithRelationInput | BlacklistedTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlacklistedTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlacklistedTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlacklistedTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlacklistedTokens
    **/
    _count?: true | BlacklistedTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlacklistedTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlacklistedTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlacklistedTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlacklistedTokenMaxAggregateInputType
  }

  export type GetBlacklistedTokenAggregateType<T extends BlacklistedTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateBlacklistedToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlacklistedToken[P]>
      : GetScalarType<T[P], AggregateBlacklistedToken[P]>
  }




  export type BlacklistedTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlacklistedTokenWhereInput
    orderBy?: BlacklistedTokenOrderByWithAggregationInput | BlacklistedTokenOrderByWithAggregationInput[]
    by: BlacklistedTokenScalarFieldEnum[] | BlacklistedTokenScalarFieldEnum
    having?: BlacklistedTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlacklistedTokenCountAggregateInputType | true
    _avg?: BlacklistedTokenAvgAggregateInputType
    _sum?: BlacklistedTokenSumAggregateInputType
    _min?: BlacklistedTokenMinAggregateInputType
    _max?: BlacklistedTokenMaxAggregateInputType
  }

  export type BlacklistedTokenGroupByOutputType = {
    id: number
    token: string
    expiredAt: Date
    createdAt: Date
    _count: BlacklistedTokenCountAggregateOutputType | null
    _avg: BlacklistedTokenAvgAggregateOutputType | null
    _sum: BlacklistedTokenSumAggregateOutputType | null
    _min: BlacklistedTokenMinAggregateOutputType | null
    _max: BlacklistedTokenMaxAggregateOutputType | null
  }

  type GetBlacklistedTokenGroupByPayload<T extends BlacklistedTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlacklistedTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlacklistedTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlacklistedTokenGroupByOutputType[P]>
            : GetScalarType<T[P], BlacklistedTokenGroupByOutputType[P]>
        }
      >
    >


  export type BlacklistedTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    expiredAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["blacklistedToken"]>



  export type BlacklistedTokenSelectScalar = {
    id?: boolean
    token?: boolean
    expiredAt?: boolean
    createdAt?: boolean
  }

  export type BlacklistedTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "expiredAt" | "createdAt", ExtArgs["result"]["blacklistedToken"]>

  export type $BlacklistedTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BlacklistedToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      token: string
      expiredAt: Date
      createdAt: Date
    }, ExtArgs["result"]["blacklistedToken"]>
    composites: {}
  }

  type BlacklistedTokenGetPayload<S extends boolean | null | undefined | BlacklistedTokenDefaultArgs> = $Result.GetResult<Prisma.$BlacklistedTokenPayload, S>

  type BlacklistedTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BlacklistedTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BlacklistedTokenCountAggregateInputType | true
    }

  export interface BlacklistedTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BlacklistedToken'], meta: { name: 'BlacklistedToken' } }
    /**
     * Find zero or one BlacklistedToken that matches the filter.
     * @param {BlacklistedTokenFindUniqueArgs} args - Arguments to find a BlacklistedToken
     * @example
     * // Get one BlacklistedToken
     * const blacklistedToken = await prisma.blacklistedToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BlacklistedTokenFindUniqueArgs>(args: SelectSubset<T, BlacklistedTokenFindUniqueArgs<ExtArgs>>): Prisma__BlacklistedTokenClient<$Result.GetResult<Prisma.$BlacklistedTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BlacklistedToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BlacklistedTokenFindUniqueOrThrowArgs} args - Arguments to find a BlacklistedToken
     * @example
     * // Get one BlacklistedToken
     * const blacklistedToken = await prisma.blacklistedToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BlacklistedTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, BlacklistedTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BlacklistedTokenClient<$Result.GetResult<Prisma.$BlacklistedTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BlacklistedToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistedTokenFindFirstArgs} args - Arguments to find a BlacklistedToken
     * @example
     * // Get one BlacklistedToken
     * const blacklistedToken = await prisma.blacklistedToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BlacklistedTokenFindFirstArgs>(args?: SelectSubset<T, BlacklistedTokenFindFirstArgs<ExtArgs>>): Prisma__BlacklistedTokenClient<$Result.GetResult<Prisma.$BlacklistedTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BlacklistedToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistedTokenFindFirstOrThrowArgs} args - Arguments to find a BlacklistedToken
     * @example
     * // Get one BlacklistedToken
     * const blacklistedToken = await prisma.blacklistedToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BlacklistedTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, BlacklistedTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__BlacklistedTokenClient<$Result.GetResult<Prisma.$BlacklistedTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BlacklistedTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistedTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlacklistedTokens
     * const blacklistedTokens = await prisma.blacklistedToken.findMany()
     * 
     * // Get first 10 BlacklistedTokens
     * const blacklistedTokens = await prisma.blacklistedToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blacklistedTokenWithIdOnly = await prisma.blacklistedToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BlacklistedTokenFindManyArgs>(args?: SelectSubset<T, BlacklistedTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlacklistedTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BlacklistedToken.
     * @param {BlacklistedTokenCreateArgs} args - Arguments to create a BlacklistedToken.
     * @example
     * // Create one BlacklistedToken
     * const BlacklistedToken = await prisma.blacklistedToken.create({
     *   data: {
     *     // ... data to create a BlacklistedToken
     *   }
     * })
     * 
     */
    create<T extends BlacklistedTokenCreateArgs>(args: SelectSubset<T, BlacklistedTokenCreateArgs<ExtArgs>>): Prisma__BlacklistedTokenClient<$Result.GetResult<Prisma.$BlacklistedTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BlacklistedTokens.
     * @param {BlacklistedTokenCreateManyArgs} args - Arguments to create many BlacklistedTokens.
     * @example
     * // Create many BlacklistedTokens
     * const blacklistedToken = await prisma.blacklistedToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BlacklistedTokenCreateManyArgs>(args?: SelectSubset<T, BlacklistedTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BlacklistedToken.
     * @param {BlacklistedTokenDeleteArgs} args - Arguments to delete one BlacklistedToken.
     * @example
     * // Delete one BlacklistedToken
     * const BlacklistedToken = await prisma.blacklistedToken.delete({
     *   where: {
     *     // ... filter to delete one BlacklistedToken
     *   }
     * })
     * 
     */
    delete<T extends BlacklistedTokenDeleteArgs>(args: SelectSubset<T, BlacklistedTokenDeleteArgs<ExtArgs>>): Prisma__BlacklistedTokenClient<$Result.GetResult<Prisma.$BlacklistedTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BlacklistedToken.
     * @param {BlacklistedTokenUpdateArgs} args - Arguments to update one BlacklistedToken.
     * @example
     * // Update one BlacklistedToken
     * const blacklistedToken = await prisma.blacklistedToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BlacklistedTokenUpdateArgs>(args: SelectSubset<T, BlacklistedTokenUpdateArgs<ExtArgs>>): Prisma__BlacklistedTokenClient<$Result.GetResult<Prisma.$BlacklistedTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BlacklistedTokens.
     * @param {BlacklistedTokenDeleteManyArgs} args - Arguments to filter BlacklistedTokens to delete.
     * @example
     * // Delete a few BlacklistedTokens
     * const { count } = await prisma.blacklistedToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BlacklistedTokenDeleteManyArgs>(args?: SelectSubset<T, BlacklistedTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlacklistedTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistedTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlacklistedTokens
     * const blacklistedToken = await prisma.blacklistedToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BlacklistedTokenUpdateManyArgs>(args: SelectSubset<T, BlacklistedTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BlacklistedToken.
     * @param {BlacklistedTokenUpsertArgs} args - Arguments to update or create a BlacklistedToken.
     * @example
     * // Update or create a BlacklistedToken
     * const blacklistedToken = await prisma.blacklistedToken.upsert({
     *   create: {
     *     // ... data to create a BlacklistedToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlacklistedToken we want to update
     *   }
     * })
     */
    upsert<T extends BlacklistedTokenUpsertArgs>(args: SelectSubset<T, BlacklistedTokenUpsertArgs<ExtArgs>>): Prisma__BlacklistedTokenClient<$Result.GetResult<Prisma.$BlacklistedTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BlacklistedTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistedTokenCountArgs} args - Arguments to filter BlacklistedTokens to count.
     * @example
     * // Count the number of BlacklistedTokens
     * const count = await prisma.blacklistedToken.count({
     *   where: {
     *     // ... the filter for the BlacklistedTokens we want to count
     *   }
     * })
    **/
    count<T extends BlacklistedTokenCountArgs>(
      args?: Subset<T, BlacklistedTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlacklistedTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlacklistedToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistedTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlacklistedTokenAggregateArgs>(args: Subset<T, BlacklistedTokenAggregateArgs>): Prisma.PrismaPromise<GetBlacklistedTokenAggregateType<T>>

    /**
     * Group by BlacklistedToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlacklistedTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlacklistedTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlacklistedTokenGroupByArgs['orderBy'] }
        : { orderBy?: BlacklistedTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlacklistedTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlacklistedTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BlacklistedToken model
   */
  readonly fields: BlacklistedTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BlacklistedToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlacklistedTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BlacklistedToken model
   */
  interface BlacklistedTokenFieldRefs {
    readonly id: FieldRef<"BlacklistedToken", 'Int'>
    readonly token: FieldRef<"BlacklistedToken", 'String'>
    readonly expiredAt: FieldRef<"BlacklistedToken", 'DateTime'>
    readonly createdAt: FieldRef<"BlacklistedToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BlacklistedToken findUnique
   */
  export type BlacklistedTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
    /**
     * Filter, which BlacklistedToken to fetch.
     */
    where: BlacklistedTokenWhereUniqueInput
  }

  /**
   * BlacklistedToken findUniqueOrThrow
   */
  export type BlacklistedTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
    /**
     * Filter, which BlacklistedToken to fetch.
     */
    where: BlacklistedTokenWhereUniqueInput
  }

  /**
   * BlacklistedToken findFirst
   */
  export type BlacklistedTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
    /**
     * Filter, which BlacklistedToken to fetch.
     */
    where?: BlacklistedTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlacklistedTokens to fetch.
     */
    orderBy?: BlacklistedTokenOrderByWithRelationInput | BlacklistedTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlacklistedTokens.
     */
    cursor?: BlacklistedTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlacklistedTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlacklistedTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlacklistedTokens.
     */
    distinct?: BlacklistedTokenScalarFieldEnum | BlacklistedTokenScalarFieldEnum[]
  }

  /**
   * BlacklistedToken findFirstOrThrow
   */
  export type BlacklistedTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
    /**
     * Filter, which BlacklistedToken to fetch.
     */
    where?: BlacklistedTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlacklistedTokens to fetch.
     */
    orderBy?: BlacklistedTokenOrderByWithRelationInput | BlacklistedTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlacklistedTokens.
     */
    cursor?: BlacklistedTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlacklistedTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlacklistedTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlacklistedTokens.
     */
    distinct?: BlacklistedTokenScalarFieldEnum | BlacklistedTokenScalarFieldEnum[]
  }

  /**
   * BlacklistedToken findMany
   */
  export type BlacklistedTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
    /**
     * Filter, which BlacklistedTokens to fetch.
     */
    where?: BlacklistedTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlacklistedTokens to fetch.
     */
    orderBy?: BlacklistedTokenOrderByWithRelationInput | BlacklistedTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlacklistedTokens.
     */
    cursor?: BlacklistedTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlacklistedTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlacklistedTokens.
     */
    skip?: number
    distinct?: BlacklistedTokenScalarFieldEnum | BlacklistedTokenScalarFieldEnum[]
  }

  /**
   * BlacklistedToken create
   */
  export type BlacklistedTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a BlacklistedToken.
     */
    data: XOR<BlacklistedTokenCreateInput, BlacklistedTokenUncheckedCreateInput>
  }

  /**
   * BlacklistedToken createMany
   */
  export type BlacklistedTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BlacklistedTokens.
     */
    data: BlacklistedTokenCreateManyInput | BlacklistedTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BlacklistedToken update
   */
  export type BlacklistedTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a BlacklistedToken.
     */
    data: XOR<BlacklistedTokenUpdateInput, BlacklistedTokenUncheckedUpdateInput>
    /**
     * Choose, which BlacklistedToken to update.
     */
    where: BlacklistedTokenWhereUniqueInput
  }

  /**
   * BlacklistedToken updateMany
   */
  export type BlacklistedTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BlacklistedTokens.
     */
    data: XOR<BlacklistedTokenUpdateManyMutationInput, BlacklistedTokenUncheckedUpdateManyInput>
    /**
     * Filter which BlacklistedTokens to update
     */
    where?: BlacklistedTokenWhereInput
    /**
     * Limit how many BlacklistedTokens to update.
     */
    limit?: number
  }

  /**
   * BlacklistedToken upsert
   */
  export type BlacklistedTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the BlacklistedToken to update in case it exists.
     */
    where: BlacklistedTokenWhereUniqueInput
    /**
     * In case the BlacklistedToken found by the `where` argument doesn't exist, create a new BlacklistedToken with this data.
     */
    create: XOR<BlacklistedTokenCreateInput, BlacklistedTokenUncheckedCreateInput>
    /**
     * In case the BlacklistedToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlacklistedTokenUpdateInput, BlacklistedTokenUncheckedUpdateInput>
  }

  /**
   * BlacklistedToken delete
   */
  export type BlacklistedTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
    /**
     * Filter which BlacklistedToken to delete.
     */
    where: BlacklistedTokenWhereUniqueInput
  }

  /**
   * BlacklistedToken deleteMany
   */
  export type BlacklistedTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BlacklistedTokens to delete
     */
    where?: BlacklistedTokenWhereInput
    /**
     * Limit how many BlacklistedTokens to delete.
     */
    limit?: number
  }

  /**
   * BlacklistedToken without action
   */
  export type BlacklistedTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlacklistedToken
     */
    select?: BlacklistedTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BlacklistedToken
     */
    omit?: BlacklistedTokenOmit<ExtArgs> | null
  }


  /**
   * Model HealthCenter
   */

  export type AggregateHealthCenter = {
    _count: HealthCenterCountAggregateOutputType | null
    _avg: HealthCenterAvgAggregateOutputType | null
    _sum: HealthCenterSumAggregateOutputType | null
    _min: HealthCenterMinAggregateOutputType | null
    _max: HealthCenterMaxAggregateOutputType | null
  }

  export type HealthCenterAvgAggregateOutputType = {
    id: number | null
  }

  export type HealthCenterSumAggregateOutputType = {
    id: number | null
  }

  export type HealthCenterMinAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HealthCenterMaxAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HealthCenterCountAggregateOutputType = {
    id: number
    name: number
    image: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HealthCenterAvgAggregateInputType = {
    id?: true
  }

  export type HealthCenterSumAggregateInputType = {
    id?: true
  }

  export type HealthCenterMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HealthCenterMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HealthCenterCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HealthCenterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthCenter to aggregate.
     */
    where?: HealthCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCenters to fetch.
     */
    orderBy?: HealthCenterOrderByWithRelationInput | HealthCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HealthCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HealthCenters
    **/
    _count?: true | HealthCenterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HealthCenterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HealthCenterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HealthCenterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HealthCenterMaxAggregateInputType
  }

  export type GetHealthCenterAggregateType<T extends HealthCenterAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthCenter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthCenter[P]>
      : GetScalarType<T[P], AggregateHealthCenter[P]>
  }




  export type HealthCenterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HealthCenterWhereInput
    orderBy?: HealthCenterOrderByWithAggregationInput | HealthCenterOrderByWithAggregationInput[]
    by: HealthCenterScalarFieldEnum[] | HealthCenterScalarFieldEnum
    having?: HealthCenterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HealthCenterCountAggregateInputType | true
    _avg?: HealthCenterAvgAggregateInputType
    _sum?: HealthCenterSumAggregateInputType
    _min?: HealthCenterMinAggregateInputType
    _max?: HealthCenterMaxAggregateInputType
  }

  export type HealthCenterGroupByOutputType = {
    id: number
    name: string
    image: string
    createdAt: Date
    updatedAt: Date
    _count: HealthCenterCountAggregateOutputType | null
    _avg: HealthCenterAvgAggregateOutputType | null
    _sum: HealthCenterSumAggregateOutputType | null
    _min: HealthCenterMinAggregateOutputType | null
    _max: HealthCenterMaxAggregateOutputType | null
  }

  type GetHealthCenterGroupByPayload<T extends HealthCenterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HealthCenterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HealthCenterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HealthCenterGroupByOutputType[P]>
            : GetScalarType<T[P], HealthCenterGroupByOutputType[P]>
        }
      >
    >


  export type HealthCenterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Survey?: boolean | HealthCenter$SurveyArgs<ExtArgs>
    _count?: boolean | HealthCenterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["healthCenter"]>



  export type HealthCenterSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HealthCenterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "image" | "createdAt" | "updatedAt", ExtArgs["result"]["healthCenter"]>
  export type HealthCenterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Survey?: boolean | HealthCenter$SurveyArgs<ExtArgs>
    _count?: boolean | HealthCenterCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $HealthCenterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HealthCenter"
    objects: {
      Survey: Prisma.$SurveyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      image: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["healthCenter"]>
    composites: {}
  }

  type HealthCenterGetPayload<S extends boolean | null | undefined | HealthCenterDefaultArgs> = $Result.GetResult<Prisma.$HealthCenterPayload, S>

  type HealthCenterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HealthCenterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HealthCenterCountAggregateInputType | true
    }

  export interface HealthCenterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HealthCenter'], meta: { name: 'HealthCenter' } }
    /**
     * Find zero or one HealthCenter that matches the filter.
     * @param {HealthCenterFindUniqueArgs} args - Arguments to find a HealthCenter
     * @example
     * // Get one HealthCenter
     * const healthCenter = await prisma.healthCenter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HealthCenterFindUniqueArgs>(args: SelectSubset<T, HealthCenterFindUniqueArgs<ExtArgs>>): Prisma__HealthCenterClient<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HealthCenter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HealthCenterFindUniqueOrThrowArgs} args - Arguments to find a HealthCenter
     * @example
     * // Get one HealthCenter
     * const healthCenter = await prisma.healthCenter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HealthCenterFindUniqueOrThrowArgs>(args: SelectSubset<T, HealthCenterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HealthCenterClient<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HealthCenter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCenterFindFirstArgs} args - Arguments to find a HealthCenter
     * @example
     * // Get one HealthCenter
     * const healthCenter = await prisma.healthCenter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HealthCenterFindFirstArgs>(args?: SelectSubset<T, HealthCenterFindFirstArgs<ExtArgs>>): Prisma__HealthCenterClient<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HealthCenter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCenterFindFirstOrThrowArgs} args - Arguments to find a HealthCenter
     * @example
     * // Get one HealthCenter
     * const healthCenter = await prisma.healthCenter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HealthCenterFindFirstOrThrowArgs>(args?: SelectSubset<T, HealthCenterFindFirstOrThrowArgs<ExtArgs>>): Prisma__HealthCenterClient<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HealthCenters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCenterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HealthCenters
     * const healthCenters = await prisma.healthCenter.findMany()
     * 
     * // Get first 10 HealthCenters
     * const healthCenters = await prisma.healthCenter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const healthCenterWithIdOnly = await prisma.healthCenter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HealthCenterFindManyArgs>(args?: SelectSubset<T, HealthCenterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HealthCenter.
     * @param {HealthCenterCreateArgs} args - Arguments to create a HealthCenter.
     * @example
     * // Create one HealthCenter
     * const HealthCenter = await prisma.healthCenter.create({
     *   data: {
     *     // ... data to create a HealthCenter
     *   }
     * })
     * 
     */
    create<T extends HealthCenterCreateArgs>(args: SelectSubset<T, HealthCenterCreateArgs<ExtArgs>>): Prisma__HealthCenterClient<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HealthCenters.
     * @param {HealthCenterCreateManyArgs} args - Arguments to create many HealthCenters.
     * @example
     * // Create many HealthCenters
     * const healthCenter = await prisma.healthCenter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HealthCenterCreateManyArgs>(args?: SelectSubset<T, HealthCenterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HealthCenter.
     * @param {HealthCenterDeleteArgs} args - Arguments to delete one HealthCenter.
     * @example
     * // Delete one HealthCenter
     * const HealthCenter = await prisma.healthCenter.delete({
     *   where: {
     *     // ... filter to delete one HealthCenter
     *   }
     * })
     * 
     */
    delete<T extends HealthCenterDeleteArgs>(args: SelectSubset<T, HealthCenterDeleteArgs<ExtArgs>>): Prisma__HealthCenterClient<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HealthCenter.
     * @param {HealthCenterUpdateArgs} args - Arguments to update one HealthCenter.
     * @example
     * // Update one HealthCenter
     * const healthCenter = await prisma.healthCenter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HealthCenterUpdateArgs>(args: SelectSubset<T, HealthCenterUpdateArgs<ExtArgs>>): Prisma__HealthCenterClient<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HealthCenters.
     * @param {HealthCenterDeleteManyArgs} args - Arguments to filter HealthCenters to delete.
     * @example
     * // Delete a few HealthCenters
     * const { count } = await prisma.healthCenter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HealthCenterDeleteManyArgs>(args?: SelectSubset<T, HealthCenterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HealthCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCenterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HealthCenters
     * const healthCenter = await prisma.healthCenter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HealthCenterUpdateManyArgs>(args: SelectSubset<T, HealthCenterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HealthCenter.
     * @param {HealthCenterUpsertArgs} args - Arguments to update or create a HealthCenter.
     * @example
     * // Update or create a HealthCenter
     * const healthCenter = await prisma.healthCenter.upsert({
     *   create: {
     *     // ... data to create a HealthCenter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HealthCenter we want to update
     *   }
     * })
     */
    upsert<T extends HealthCenterUpsertArgs>(args: SelectSubset<T, HealthCenterUpsertArgs<ExtArgs>>): Prisma__HealthCenterClient<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HealthCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCenterCountArgs} args - Arguments to filter HealthCenters to count.
     * @example
     * // Count the number of HealthCenters
     * const count = await prisma.healthCenter.count({
     *   where: {
     *     // ... the filter for the HealthCenters we want to count
     *   }
     * })
    **/
    count<T extends HealthCenterCountArgs>(
      args?: Subset<T, HealthCenterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HealthCenterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HealthCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCenterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HealthCenterAggregateArgs>(args: Subset<T, HealthCenterAggregateArgs>): Prisma.PrismaPromise<GetHealthCenterAggregateType<T>>

    /**
     * Group by HealthCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCenterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HealthCenterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HealthCenterGroupByArgs['orderBy'] }
        : { orderBy?: HealthCenterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HealthCenterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthCenterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HealthCenter model
   */
  readonly fields: HealthCenterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HealthCenter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HealthCenterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Survey<T extends HealthCenter$SurveyArgs<ExtArgs> = {}>(args?: Subset<T, HealthCenter$SurveyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HealthCenter model
   */
  interface HealthCenterFieldRefs {
    readonly id: FieldRef<"HealthCenter", 'Int'>
    readonly name: FieldRef<"HealthCenter", 'String'>
    readonly image: FieldRef<"HealthCenter", 'String'>
    readonly createdAt: FieldRef<"HealthCenter", 'DateTime'>
    readonly updatedAt: FieldRef<"HealthCenter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HealthCenter findUnique
   */
  export type HealthCenterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
    /**
     * Filter, which HealthCenter to fetch.
     */
    where: HealthCenterWhereUniqueInput
  }

  /**
   * HealthCenter findUniqueOrThrow
   */
  export type HealthCenterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
    /**
     * Filter, which HealthCenter to fetch.
     */
    where: HealthCenterWhereUniqueInput
  }

  /**
   * HealthCenter findFirst
   */
  export type HealthCenterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
    /**
     * Filter, which HealthCenter to fetch.
     */
    where?: HealthCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCenters to fetch.
     */
    orderBy?: HealthCenterOrderByWithRelationInput | HealthCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthCenters.
     */
    cursor?: HealthCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthCenters.
     */
    distinct?: HealthCenterScalarFieldEnum | HealthCenterScalarFieldEnum[]
  }

  /**
   * HealthCenter findFirstOrThrow
   */
  export type HealthCenterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
    /**
     * Filter, which HealthCenter to fetch.
     */
    where?: HealthCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCenters to fetch.
     */
    orderBy?: HealthCenterOrderByWithRelationInput | HealthCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthCenters.
     */
    cursor?: HealthCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthCenters.
     */
    distinct?: HealthCenterScalarFieldEnum | HealthCenterScalarFieldEnum[]
  }

  /**
   * HealthCenter findMany
   */
  export type HealthCenterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
    /**
     * Filter, which HealthCenters to fetch.
     */
    where?: HealthCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCenters to fetch.
     */
    orderBy?: HealthCenterOrderByWithRelationInput | HealthCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HealthCenters.
     */
    cursor?: HealthCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCenters.
     */
    skip?: number
    distinct?: HealthCenterScalarFieldEnum | HealthCenterScalarFieldEnum[]
  }

  /**
   * HealthCenter create
   */
  export type HealthCenterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
    /**
     * The data needed to create a HealthCenter.
     */
    data: XOR<HealthCenterCreateInput, HealthCenterUncheckedCreateInput>
  }

  /**
   * HealthCenter createMany
   */
  export type HealthCenterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HealthCenters.
     */
    data: HealthCenterCreateManyInput | HealthCenterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HealthCenter update
   */
  export type HealthCenterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
    /**
     * The data needed to update a HealthCenter.
     */
    data: XOR<HealthCenterUpdateInput, HealthCenterUncheckedUpdateInput>
    /**
     * Choose, which HealthCenter to update.
     */
    where: HealthCenterWhereUniqueInput
  }

  /**
   * HealthCenter updateMany
   */
  export type HealthCenterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HealthCenters.
     */
    data: XOR<HealthCenterUpdateManyMutationInput, HealthCenterUncheckedUpdateManyInput>
    /**
     * Filter which HealthCenters to update
     */
    where?: HealthCenterWhereInput
    /**
     * Limit how many HealthCenters to update.
     */
    limit?: number
  }

  /**
   * HealthCenter upsert
   */
  export type HealthCenterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
    /**
     * The filter to search for the HealthCenter to update in case it exists.
     */
    where: HealthCenterWhereUniqueInput
    /**
     * In case the HealthCenter found by the `where` argument doesn't exist, create a new HealthCenter with this data.
     */
    create: XOR<HealthCenterCreateInput, HealthCenterUncheckedCreateInput>
    /**
     * In case the HealthCenter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HealthCenterUpdateInput, HealthCenterUncheckedUpdateInput>
  }

  /**
   * HealthCenter delete
   */
  export type HealthCenterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
    /**
     * Filter which HealthCenter to delete.
     */
    where: HealthCenterWhereUniqueInput
  }

  /**
   * HealthCenter deleteMany
   */
  export type HealthCenterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthCenters to delete
     */
    where?: HealthCenterWhereInput
    /**
     * Limit how many HealthCenters to delete.
     */
    limit?: number
  }

  /**
   * HealthCenter.Survey
   */
  export type HealthCenter$SurveyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    where?: SurveyWhereInput
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    cursor?: SurveyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * HealthCenter without action
   */
  export type HealthCenterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCenter
     */
    select?: HealthCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthCenter
     */
    omit?: HealthCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCenterInclude<ExtArgs> | null
  }


  /**
   * Model Education
   */

  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationAvgAggregateOutputType = {
    id: number | null
  }

  export type EducationSumAggregateOutputType = {
    id: number | null
  }

  export type EducationMinAggregateOutputType = {
    id: number | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EducationMaxAggregateOutputType = {
    id: number | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EducationCountAggregateOutputType = {
    id: number
    title: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EducationAvgAggregateInputType = {
    id?: true
  }

  export type EducationSumAggregateInputType = {
    id?: true
  }

  export type EducationMinAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EducationMaxAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EducationCountAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EducationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Education to aggregate.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EducationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EducationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithAggregationInput | EducationOrderByWithAggregationInput[]
    by: EducationScalarFieldEnum[] | EducationScalarFieldEnum
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _avg?: EducationAvgAggregateInputType
    _sum?: EducationSumAggregateInputType
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }

  export type EducationGroupByOutputType = {
    id: number
    title: string
    createdAt: Date
    updatedAt: Date
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    images?: boolean | Education$imagesArgs<ExtArgs>
    _count?: boolean | EducationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>



  export type EducationSelectScalar = {
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EducationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "createdAt" | "updatedAt", ExtArgs["result"]["education"]>
  export type EducationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | Education$imagesArgs<ExtArgs>
    _count?: boolean | EducationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EducationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Education"
    objects: {
      images: Prisma.$EducationImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["education"]>
    composites: {}
  }

  type EducationGetPayload<S extends boolean | null | undefined | EducationDefaultArgs> = $Result.GetResult<Prisma.$EducationPayload, S>

  type EducationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EducationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EducationCountAggregateInputType | true
    }

  export interface EducationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Education'], meta: { name: 'Education' } }
    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EducationFindUniqueArgs>(args: SelectSubset<T, EducationFindUniqueArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Education that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(args: SelectSubset<T, EducationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EducationFindFirstArgs>(args?: SelectSubset<T, EducationFindFirstArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Education that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(args?: SelectSubset<T, EducationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EducationFindManyArgs>(args?: SelectSubset<T, EducationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
     */
    create<T extends EducationCreateArgs>(args: SelectSubset<T, EducationCreateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Educations.
     * @param {EducationCreateManyArgs} args - Arguments to create many Educations.
     * @example
     * // Create many Educations
     * const education = await prisma.education.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EducationCreateManyArgs>(args?: SelectSubset<T, EducationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
     */
    delete<T extends EducationDeleteArgs>(args: SelectSubset<T, EducationDeleteArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EducationUpdateArgs>(args: SelectSubset<T, EducationUpdateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EducationDeleteManyArgs>(args?: SelectSubset<T, EducationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EducationUpdateManyArgs>(args: SelectSubset<T, EducationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
     */
    upsert<T extends EducationUpsertArgs>(args: SelectSubset<T, EducationUpsertArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): Prisma.PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Education model
   */
  readonly fields: EducationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EducationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends Education$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Education$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Education model
   */
  interface EducationFieldRefs {
    readonly id: FieldRef<"Education", 'Int'>
    readonly title: FieldRef<"Education", 'String'>
    readonly createdAt: FieldRef<"Education", 'DateTime'>
    readonly updatedAt: FieldRef<"Education", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Education findUnique
   */
  export type EducationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findFirst
   */
  export type EducationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findMany
   */
  export type EducationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Educations to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education create
   */
  export type EducationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to create a Education.
     */
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }

  /**
   * Education createMany
   */
  export type EducationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Education update
   */
  export type EducationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to update a Education.
     */
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
    /**
     * Limit how many Educations to update.
     */
    limit?: number
  }

  /**
   * Education upsert
   */
  export type EducationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The filter to search for the Education to update in case it exists.
     */
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     */
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }

  /**
   * Education delete
   */
  export type EducationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter which Education to delete.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Educations to delete
     */
    where?: EducationWhereInput
    /**
     * Limit how many Educations to delete.
     */
    limit?: number
  }

  /**
   * Education.images
   */
  export type Education$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    where?: EducationImageWhereInput
    orderBy?: EducationImageOrderByWithRelationInput | EducationImageOrderByWithRelationInput[]
    cursor?: EducationImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationImageScalarFieldEnum | EducationImageScalarFieldEnum[]
  }

  /**
   * Education without action
   */
  export type EducationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    imagePath: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    imagePath: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    imagePath: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    imagePath?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    imagePath?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    imagePath?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: number
    imagePath: string
    createdAt: Date
    updatedAt: Date
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imagePath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    educations?: boolean | Image$educationsArgs<ExtArgs>
    MosquitoImage?: boolean | Image$MosquitoImageArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>



  export type ImageSelectScalar = {
    id?: boolean
    imagePath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "imagePath" | "createdAt" | "updatedAt", ExtArgs["result"]["image"]>
  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    educations?: boolean | Image$educationsArgs<ExtArgs>
    MosquitoImage?: boolean | Image$MosquitoImageArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      educations: Prisma.$EducationImagePayload<ExtArgs>[]
      MosquitoImage: Prisma.$MosquitoImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      imagePath: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    educations<T extends Image$educationsArgs<ExtArgs> = {}>(args?: Subset<T, Image$educationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MosquitoImage<T extends Image$MosquitoImageArgs<ExtArgs> = {}>(args?: Subset<T, Image$MosquitoImageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'Int'>
    readonly imagePath: FieldRef<"Image", 'String'>
    readonly createdAt: FieldRef<"Image", 'DateTime'>
    readonly updatedAt: FieldRef<"Image", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image.educations
   */
  export type Image$educationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    where?: EducationImageWhereInput
    orderBy?: EducationImageOrderByWithRelationInput | EducationImageOrderByWithRelationInput[]
    cursor?: EducationImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationImageScalarFieldEnum | EducationImageScalarFieldEnum[]
  }

  /**
   * Image.MosquitoImage
   */
  export type Image$MosquitoImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    where?: MosquitoImageWhereInput
    orderBy?: MosquitoImageOrderByWithRelationInput | MosquitoImageOrderByWithRelationInput[]
    cursor?: MosquitoImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MosquitoImageScalarFieldEnum | MosquitoImageScalarFieldEnum[]
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model EducationImage
   */

  export type AggregateEducationImage = {
    _count: EducationImageCountAggregateOutputType | null
    _avg: EducationImageAvgAggregateOutputType | null
    _sum: EducationImageSumAggregateOutputType | null
    _min: EducationImageMinAggregateOutputType | null
    _max: EducationImageMaxAggregateOutputType | null
  }

  export type EducationImageAvgAggregateOutputType = {
    id: number | null
    educationId: number | null
    imageId: number | null
  }

  export type EducationImageSumAggregateOutputType = {
    id: number | null
    educationId: number | null
    imageId: number | null
  }

  export type EducationImageMinAggregateOutputType = {
    id: number | null
    educationId: number | null
    imageId: number | null
  }

  export type EducationImageMaxAggregateOutputType = {
    id: number | null
    educationId: number | null
    imageId: number | null
  }

  export type EducationImageCountAggregateOutputType = {
    id: number
    educationId: number
    imageId: number
    _all: number
  }


  export type EducationImageAvgAggregateInputType = {
    id?: true
    educationId?: true
    imageId?: true
  }

  export type EducationImageSumAggregateInputType = {
    id?: true
    educationId?: true
    imageId?: true
  }

  export type EducationImageMinAggregateInputType = {
    id?: true
    educationId?: true
    imageId?: true
  }

  export type EducationImageMaxAggregateInputType = {
    id?: true
    educationId?: true
    imageId?: true
  }

  export type EducationImageCountAggregateInputType = {
    id?: true
    educationId?: true
    imageId?: true
    _all?: true
  }

  export type EducationImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EducationImage to aggregate.
     */
    where?: EducationImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EducationImages to fetch.
     */
    orderBy?: EducationImageOrderByWithRelationInput | EducationImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EducationImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EducationImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EducationImages
    **/
    _count?: true | EducationImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EducationImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EducationImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationImageMaxAggregateInputType
  }

  export type GetEducationImageAggregateType<T extends EducationImageAggregateArgs> = {
        [P in keyof T & keyof AggregateEducationImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducationImage[P]>
      : GetScalarType<T[P], AggregateEducationImage[P]>
  }




  export type EducationImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationImageWhereInput
    orderBy?: EducationImageOrderByWithAggregationInput | EducationImageOrderByWithAggregationInput[]
    by: EducationImageScalarFieldEnum[] | EducationImageScalarFieldEnum
    having?: EducationImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationImageCountAggregateInputType | true
    _avg?: EducationImageAvgAggregateInputType
    _sum?: EducationImageSumAggregateInputType
    _min?: EducationImageMinAggregateInputType
    _max?: EducationImageMaxAggregateInputType
  }

  export type EducationImageGroupByOutputType = {
    id: number
    educationId: number
    imageId: number
    _count: EducationImageCountAggregateOutputType | null
    _avg: EducationImageAvgAggregateOutputType | null
    _sum: EducationImageSumAggregateOutputType | null
    _min: EducationImageMinAggregateOutputType | null
    _max: EducationImageMaxAggregateOutputType | null
  }

  type GetEducationImageGroupByPayload<T extends EducationImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EducationImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationImageGroupByOutputType[P]>
            : GetScalarType<T[P], EducationImageGroupByOutputType[P]>
        }
      >
    >


  export type EducationImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    educationId?: boolean
    imageId?: boolean
    education?: boolean | EducationDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["educationImage"]>



  export type EducationImageSelectScalar = {
    id?: boolean
    educationId?: boolean
    imageId?: boolean
  }

  export type EducationImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "educationId" | "imageId", ExtArgs["result"]["educationImage"]>
  export type EducationImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    education?: boolean | EducationDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }

  export type $EducationImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EducationImage"
    objects: {
      education: Prisma.$EducationPayload<ExtArgs>
      image: Prisma.$ImagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      educationId: number
      imageId: number
    }, ExtArgs["result"]["educationImage"]>
    composites: {}
  }

  type EducationImageGetPayload<S extends boolean | null | undefined | EducationImageDefaultArgs> = $Result.GetResult<Prisma.$EducationImagePayload, S>

  type EducationImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EducationImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EducationImageCountAggregateInputType | true
    }

  export interface EducationImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EducationImage'], meta: { name: 'EducationImage' } }
    /**
     * Find zero or one EducationImage that matches the filter.
     * @param {EducationImageFindUniqueArgs} args - Arguments to find a EducationImage
     * @example
     * // Get one EducationImage
     * const educationImage = await prisma.educationImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EducationImageFindUniqueArgs>(args: SelectSubset<T, EducationImageFindUniqueArgs<ExtArgs>>): Prisma__EducationImageClient<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EducationImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EducationImageFindUniqueOrThrowArgs} args - Arguments to find a EducationImage
     * @example
     * // Get one EducationImage
     * const educationImage = await prisma.educationImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EducationImageFindUniqueOrThrowArgs>(args: SelectSubset<T, EducationImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EducationImageClient<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EducationImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationImageFindFirstArgs} args - Arguments to find a EducationImage
     * @example
     * // Get one EducationImage
     * const educationImage = await prisma.educationImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EducationImageFindFirstArgs>(args?: SelectSubset<T, EducationImageFindFirstArgs<ExtArgs>>): Prisma__EducationImageClient<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EducationImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationImageFindFirstOrThrowArgs} args - Arguments to find a EducationImage
     * @example
     * // Get one EducationImage
     * const educationImage = await prisma.educationImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EducationImageFindFirstOrThrowArgs>(args?: SelectSubset<T, EducationImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__EducationImageClient<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EducationImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EducationImages
     * const educationImages = await prisma.educationImage.findMany()
     * 
     * // Get first 10 EducationImages
     * const educationImages = await prisma.educationImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationImageWithIdOnly = await prisma.educationImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EducationImageFindManyArgs>(args?: SelectSubset<T, EducationImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EducationImage.
     * @param {EducationImageCreateArgs} args - Arguments to create a EducationImage.
     * @example
     * // Create one EducationImage
     * const EducationImage = await prisma.educationImage.create({
     *   data: {
     *     // ... data to create a EducationImage
     *   }
     * })
     * 
     */
    create<T extends EducationImageCreateArgs>(args: SelectSubset<T, EducationImageCreateArgs<ExtArgs>>): Prisma__EducationImageClient<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EducationImages.
     * @param {EducationImageCreateManyArgs} args - Arguments to create many EducationImages.
     * @example
     * // Create many EducationImages
     * const educationImage = await prisma.educationImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EducationImageCreateManyArgs>(args?: SelectSubset<T, EducationImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EducationImage.
     * @param {EducationImageDeleteArgs} args - Arguments to delete one EducationImage.
     * @example
     * // Delete one EducationImage
     * const EducationImage = await prisma.educationImage.delete({
     *   where: {
     *     // ... filter to delete one EducationImage
     *   }
     * })
     * 
     */
    delete<T extends EducationImageDeleteArgs>(args: SelectSubset<T, EducationImageDeleteArgs<ExtArgs>>): Prisma__EducationImageClient<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EducationImage.
     * @param {EducationImageUpdateArgs} args - Arguments to update one EducationImage.
     * @example
     * // Update one EducationImage
     * const educationImage = await prisma.educationImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EducationImageUpdateArgs>(args: SelectSubset<T, EducationImageUpdateArgs<ExtArgs>>): Prisma__EducationImageClient<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EducationImages.
     * @param {EducationImageDeleteManyArgs} args - Arguments to filter EducationImages to delete.
     * @example
     * // Delete a few EducationImages
     * const { count } = await prisma.educationImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EducationImageDeleteManyArgs>(args?: SelectSubset<T, EducationImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EducationImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EducationImages
     * const educationImage = await prisma.educationImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EducationImageUpdateManyArgs>(args: SelectSubset<T, EducationImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EducationImage.
     * @param {EducationImageUpsertArgs} args - Arguments to update or create a EducationImage.
     * @example
     * // Update or create a EducationImage
     * const educationImage = await prisma.educationImage.upsert({
     *   create: {
     *     // ... data to create a EducationImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EducationImage we want to update
     *   }
     * })
     */
    upsert<T extends EducationImageUpsertArgs>(args: SelectSubset<T, EducationImageUpsertArgs<ExtArgs>>): Prisma__EducationImageClient<$Result.GetResult<Prisma.$EducationImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EducationImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationImageCountArgs} args - Arguments to filter EducationImages to count.
     * @example
     * // Count the number of EducationImages
     * const count = await prisma.educationImage.count({
     *   where: {
     *     // ... the filter for the EducationImages we want to count
     *   }
     * })
    **/
    count<T extends EducationImageCountArgs>(
      args?: Subset<T, EducationImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EducationImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationImageAggregateArgs>(args: Subset<T, EducationImageAggregateArgs>): Prisma.PrismaPromise<GetEducationImageAggregateType<T>>

    /**
     * Group by EducationImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationImageGroupByArgs['orderBy'] }
        : { orderBy?: EducationImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EducationImage model
   */
  readonly fields: EducationImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EducationImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EducationImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    education<T extends EducationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EducationDefaultArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    image<T extends ImageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ImageDefaultArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EducationImage model
   */
  interface EducationImageFieldRefs {
    readonly id: FieldRef<"EducationImage", 'Int'>
    readonly educationId: FieldRef<"EducationImage", 'Int'>
    readonly imageId: FieldRef<"EducationImage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * EducationImage findUnique
   */
  export type EducationImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    /**
     * Filter, which EducationImage to fetch.
     */
    where: EducationImageWhereUniqueInput
  }

  /**
   * EducationImage findUniqueOrThrow
   */
  export type EducationImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    /**
     * Filter, which EducationImage to fetch.
     */
    where: EducationImageWhereUniqueInput
  }

  /**
   * EducationImage findFirst
   */
  export type EducationImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    /**
     * Filter, which EducationImage to fetch.
     */
    where?: EducationImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EducationImages to fetch.
     */
    orderBy?: EducationImageOrderByWithRelationInput | EducationImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EducationImages.
     */
    cursor?: EducationImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EducationImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EducationImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EducationImages.
     */
    distinct?: EducationImageScalarFieldEnum | EducationImageScalarFieldEnum[]
  }

  /**
   * EducationImage findFirstOrThrow
   */
  export type EducationImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    /**
     * Filter, which EducationImage to fetch.
     */
    where?: EducationImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EducationImages to fetch.
     */
    orderBy?: EducationImageOrderByWithRelationInput | EducationImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EducationImages.
     */
    cursor?: EducationImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EducationImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EducationImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EducationImages.
     */
    distinct?: EducationImageScalarFieldEnum | EducationImageScalarFieldEnum[]
  }

  /**
   * EducationImage findMany
   */
  export type EducationImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    /**
     * Filter, which EducationImages to fetch.
     */
    where?: EducationImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EducationImages to fetch.
     */
    orderBy?: EducationImageOrderByWithRelationInput | EducationImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EducationImages.
     */
    cursor?: EducationImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EducationImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EducationImages.
     */
    skip?: number
    distinct?: EducationImageScalarFieldEnum | EducationImageScalarFieldEnum[]
  }

  /**
   * EducationImage create
   */
  export type EducationImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    /**
     * The data needed to create a EducationImage.
     */
    data: XOR<EducationImageCreateInput, EducationImageUncheckedCreateInput>
  }

  /**
   * EducationImage createMany
   */
  export type EducationImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EducationImages.
     */
    data: EducationImageCreateManyInput | EducationImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EducationImage update
   */
  export type EducationImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    /**
     * The data needed to update a EducationImage.
     */
    data: XOR<EducationImageUpdateInput, EducationImageUncheckedUpdateInput>
    /**
     * Choose, which EducationImage to update.
     */
    where: EducationImageWhereUniqueInput
  }

  /**
   * EducationImage updateMany
   */
  export type EducationImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EducationImages.
     */
    data: XOR<EducationImageUpdateManyMutationInput, EducationImageUncheckedUpdateManyInput>
    /**
     * Filter which EducationImages to update
     */
    where?: EducationImageWhereInput
    /**
     * Limit how many EducationImages to update.
     */
    limit?: number
  }

  /**
   * EducationImage upsert
   */
  export type EducationImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    /**
     * The filter to search for the EducationImage to update in case it exists.
     */
    where: EducationImageWhereUniqueInput
    /**
     * In case the EducationImage found by the `where` argument doesn't exist, create a new EducationImage with this data.
     */
    create: XOR<EducationImageCreateInput, EducationImageUncheckedCreateInput>
    /**
     * In case the EducationImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationImageUpdateInput, EducationImageUncheckedUpdateInput>
  }

  /**
   * EducationImage delete
   */
  export type EducationImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
    /**
     * Filter which EducationImage to delete.
     */
    where: EducationImageWhereUniqueInput
  }

  /**
   * EducationImage deleteMany
   */
  export type EducationImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EducationImages to delete
     */
    where?: EducationImageWhereInput
    /**
     * Limit how many EducationImages to delete.
     */
    limit?: number
  }

  /**
   * EducationImage without action
   */
  export type EducationImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationImage
     */
    select?: EducationImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EducationImage
     */
    omit?: EducationImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationImageInclude<ExtArgs> | null
  }


  /**
   * Model Video
   */

  export type AggregateVideo = {
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  export type VideoAvgAggregateOutputType = {
    id: number | null
  }

  export type VideoSumAggregateOutputType = {
    id: number | null
  }

  export type VideoMinAggregateOutputType = {
    id: number | null
    title: string | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoMaxAggregateOutputType = {
    id: number | null
    title: string | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoCountAggregateOutputType = {
    id: number
    title: number
    url: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VideoAvgAggregateInputType = {
    id?: true
  }

  export type VideoSumAggregateInputType = {
    id?: true
  }

  export type VideoMinAggregateInputType = {
    id?: true
    title?: true
    url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoMaxAggregateInputType = {
    id?: true
    title?: true
    url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoCountAggregateInputType = {
    id?: true
    title?: true
    url?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VideoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Video to aggregate.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Videos
    **/
    _count?: true | VideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VideoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VideoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoMaxAggregateInputType
  }

  export type GetVideoAggregateType<T extends VideoAggregateArgs> = {
        [P in keyof T & keyof AggregateVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideo[P]>
      : GetScalarType<T[P], AggregateVideo[P]>
  }




  export type VideoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithAggregationInput | VideoOrderByWithAggregationInput[]
    by: VideoScalarFieldEnum[] | VideoScalarFieldEnum
    having?: VideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoCountAggregateInputType | true
    _avg?: VideoAvgAggregateInputType
    _sum?: VideoSumAggregateInputType
    _min?: VideoMinAggregateInputType
    _max?: VideoMaxAggregateInputType
  }

  export type VideoGroupByOutputType = {
    id: number
    title: string
    url: string
    createdAt: Date
    updatedAt: Date
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  type GetVideoGroupByPayload<T extends VideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoGroupByOutputType[P]>
            : GetScalarType<T[P], VideoGroupByOutputType[P]>
        }
      >
    >


  export type VideoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["video"]>



  export type VideoSelectScalar = {
    id?: boolean
    title?: boolean
    url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VideoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "url" | "createdAt" | "updatedAt", ExtArgs["result"]["video"]>

  export type $VideoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Video"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      url: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["video"]>
    composites: {}
  }

  type VideoGetPayload<S extends boolean | null | undefined | VideoDefaultArgs> = $Result.GetResult<Prisma.$VideoPayload, S>

  type VideoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VideoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VideoCountAggregateInputType | true
    }

  export interface VideoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Video'], meta: { name: 'Video' } }
    /**
     * Find zero or one Video that matches the filter.
     * @param {VideoFindUniqueArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VideoFindUniqueArgs>(args: SelectSubset<T, VideoFindUniqueArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Video that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VideoFindUniqueOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VideoFindUniqueOrThrowArgs>(args: SelectSubset<T, VideoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Video that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VideoFindFirstArgs>(args?: SelectSubset<T, VideoFindFirstArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Video that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VideoFindFirstOrThrowArgs>(args?: SelectSubset<T, VideoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videos
     * const videos = await prisma.video.findMany()
     * 
     * // Get first 10 Videos
     * const videos = await prisma.video.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoWithIdOnly = await prisma.video.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VideoFindManyArgs>(args?: SelectSubset<T, VideoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Video.
     * @param {VideoCreateArgs} args - Arguments to create a Video.
     * @example
     * // Create one Video
     * const Video = await prisma.video.create({
     *   data: {
     *     // ... data to create a Video
     *   }
     * })
     * 
     */
    create<T extends VideoCreateArgs>(args: SelectSubset<T, VideoCreateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Videos.
     * @param {VideoCreateManyArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VideoCreateManyArgs>(args?: SelectSubset<T, VideoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Video.
     * @param {VideoDeleteArgs} args - Arguments to delete one Video.
     * @example
     * // Delete one Video
     * const Video = await prisma.video.delete({
     *   where: {
     *     // ... filter to delete one Video
     *   }
     * })
     * 
     */
    delete<T extends VideoDeleteArgs>(args: SelectSubset<T, VideoDeleteArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Video.
     * @param {VideoUpdateArgs} args - Arguments to update one Video.
     * @example
     * // Update one Video
     * const video = await prisma.video.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VideoUpdateArgs>(args: SelectSubset<T, VideoUpdateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Videos.
     * @param {VideoDeleteManyArgs} args - Arguments to filter Videos to delete.
     * @example
     * // Delete a few Videos
     * const { count } = await prisma.video.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VideoDeleteManyArgs>(args?: SelectSubset<T, VideoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VideoUpdateManyArgs>(args: SelectSubset<T, VideoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Video.
     * @param {VideoUpsertArgs} args - Arguments to update or create a Video.
     * @example
     * // Update or create a Video
     * const video = await prisma.video.upsert({
     *   create: {
     *     // ... data to create a Video
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Video we want to update
     *   }
     * })
     */
    upsert<T extends VideoUpsertArgs>(args: SelectSubset<T, VideoUpsertArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoCountArgs} args - Arguments to filter Videos to count.
     * @example
     * // Count the number of Videos
     * const count = await prisma.video.count({
     *   where: {
     *     // ... the filter for the Videos we want to count
     *   }
     * })
    **/
    count<T extends VideoCountArgs>(
      args?: Subset<T, VideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoAggregateArgs>(args: Subset<T, VideoAggregateArgs>): Prisma.PrismaPromise<GetVideoAggregateType<T>>

    /**
     * Group by Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoGroupByArgs['orderBy'] }
        : { orderBy?: VideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Video model
   */
  readonly fields: VideoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Video.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VideoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Video model
   */
  interface VideoFieldRefs {
    readonly id: FieldRef<"Video", 'Int'>
    readonly title: FieldRef<"Video", 'String'>
    readonly url: FieldRef<"Video", 'String'>
    readonly createdAt: FieldRef<"Video", 'DateTime'>
    readonly updatedAt: FieldRef<"Video", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Video findUnique
   */
  export type VideoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findUniqueOrThrow
   */
  export type VideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findFirst
   */
  export type VideoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findFirstOrThrow
   */
  export type VideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findMany
   */
  export type VideoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Filter, which Videos to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video create
   */
  export type VideoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * The data needed to create a Video.
     */
    data: XOR<VideoCreateInput, VideoUncheckedCreateInput>
  }

  /**
   * Video createMany
   */
  export type VideoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Video update
   */
  export type VideoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * The data needed to update a Video.
     */
    data: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
    /**
     * Choose, which Video to update.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video updateMany
   */
  export type VideoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to update.
     */
    limit?: number
  }

  /**
   * Video upsert
   */
  export type VideoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * The filter to search for the Video to update in case it exists.
     */
    where: VideoWhereUniqueInput
    /**
     * In case the Video found by the `where` argument doesn't exist, create a new Video with this data.
     */
    create: XOR<VideoCreateInput, VideoUncheckedCreateInput>
    /**
     * In case the Video was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
  }

  /**
   * Video delete
   */
  export type VideoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Filter which Video to delete.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video deleteMany
   */
  export type VideoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Videos to delete
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to delete.
     */
    limit?: number
  }

  /**
   * Video without action
   */
  export type VideoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
  }


  /**
   * Model MosquitoImage
   */

  export type AggregateMosquitoImage = {
    _count: MosquitoImageCountAggregateOutputType | null
    _avg: MosquitoImageAvgAggregateOutputType | null
    _sum: MosquitoImageSumAggregateOutputType | null
    _min: MosquitoImageMinAggregateOutputType | null
    _max: MosquitoImageMaxAggregateOutputType | null
  }

  export type MosquitoImageAvgAggregateOutputType = {
    id: number | null
    mosquitoId: number | null
    imageId: number | null
  }

  export type MosquitoImageSumAggregateOutputType = {
    id: number | null
    mosquitoId: number | null
    imageId: number | null
  }

  export type MosquitoImageMinAggregateOutputType = {
    id: number | null
    mosquitoId: number | null
    imageId: number | null
  }

  export type MosquitoImageMaxAggregateOutputType = {
    id: number | null
    mosquitoId: number | null
    imageId: number | null
  }

  export type MosquitoImageCountAggregateOutputType = {
    id: number
    mosquitoId: number
    imageId: number
    _all: number
  }


  export type MosquitoImageAvgAggregateInputType = {
    id?: true
    mosquitoId?: true
    imageId?: true
  }

  export type MosquitoImageSumAggregateInputType = {
    id?: true
    mosquitoId?: true
    imageId?: true
  }

  export type MosquitoImageMinAggregateInputType = {
    id?: true
    mosquitoId?: true
    imageId?: true
  }

  export type MosquitoImageMaxAggregateInputType = {
    id?: true
    mosquitoId?: true
    imageId?: true
  }

  export type MosquitoImageCountAggregateInputType = {
    id?: true
    mosquitoId?: true
    imageId?: true
    _all?: true
  }

  export type MosquitoImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MosquitoImage to aggregate.
     */
    where?: MosquitoImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MosquitoImages to fetch.
     */
    orderBy?: MosquitoImageOrderByWithRelationInput | MosquitoImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MosquitoImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MosquitoImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MosquitoImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MosquitoImages
    **/
    _count?: true | MosquitoImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MosquitoImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MosquitoImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MosquitoImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MosquitoImageMaxAggregateInputType
  }

  export type GetMosquitoImageAggregateType<T extends MosquitoImageAggregateArgs> = {
        [P in keyof T & keyof AggregateMosquitoImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMosquitoImage[P]>
      : GetScalarType<T[P], AggregateMosquitoImage[P]>
  }




  export type MosquitoImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MosquitoImageWhereInput
    orderBy?: MosquitoImageOrderByWithAggregationInput | MosquitoImageOrderByWithAggregationInput[]
    by: MosquitoImageScalarFieldEnum[] | MosquitoImageScalarFieldEnum
    having?: MosquitoImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MosquitoImageCountAggregateInputType | true
    _avg?: MosquitoImageAvgAggregateInputType
    _sum?: MosquitoImageSumAggregateInputType
    _min?: MosquitoImageMinAggregateInputType
    _max?: MosquitoImageMaxAggregateInputType
  }

  export type MosquitoImageGroupByOutputType = {
    id: number
    mosquitoId: number
    imageId: number
    _count: MosquitoImageCountAggregateOutputType | null
    _avg: MosquitoImageAvgAggregateOutputType | null
    _sum: MosquitoImageSumAggregateOutputType | null
    _min: MosquitoImageMinAggregateOutputType | null
    _max: MosquitoImageMaxAggregateOutputType | null
  }

  type GetMosquitoImageGroupByPayload<T extends MosquitoImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MosquitoImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MosquitoImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MosquitoImageGroupByOutputType[P]>
            : GetScalarType<T[P], MosquitoImageGroupByOutputType[P]>
        }
      >
    >


  export type MosquitoImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mosquitoId?: boolean
    imageId?: boolean
    mosquito?: boolean | MosquitoDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mosquitoImage"]>



  export type MosquitoImageSelectScalar = {
    id?: boolean
    mosquitoId?: boolean
    imageId?: boolean
  }

  export type MosquitoImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "mosquitoId" | "imageId", ExtArgs["result"]["mosquitoImage"]>
  export type MosquitoImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mosquito?: boolean | MosquitoDefaultArgs<ExtArgs>
    image?: boolean | ImageDefaultArgs<ExtArgs>
  }

  export type $MosquitoImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MosquitoImage"
    objects: {
      mosquito: Prisma.$MosquitoPayload<ExtArgs>
      image: Prisma.$ImagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      mosquitoId: number
      imageId: number
    }, ExtArgs["result"]["mosquitoImage"]>
    composites: {}
  }

  type MosquitoImageGetPayload<S extends boolean | null | undefined | MosquitoImageDefaultArgs> = $Result.GetResult<Prisma.$MosquitoImagePayload, S>

  type MosquitoImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MosquitoImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MosquitoImageCountAggregateInputType | true
    }

  export interface MosquitoImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MosquitoImage'], meta: { name: 'MosquitoImage' } }
    /**
     * Find zero or one MosquitoImage that matches the filter.
     * @param {MosquitoImageFindUniqueArgs} args - Arguments to find a MosquitoImage
     * @example
     * // Get one MosquitoImage
     * const mosquitoImage = await prisma.mosquitoImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MosquitoImageFindUniqueArgs>(args: SelectSubset<T, MosquitoImageFindUniqueArgs<ExtArgs>>): Prisma__MosquitoImageClient<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MosquitoImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MosquitoImageFindUniqueOrThrowArgs} args - Arguments to find a MosquitoImage
     * @example
     * // Get one MosquitoImage
     * const mosquitoImage = await prisma.mosquitoImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MosquitoImageFindUniqueOrThrowArgs>(args: SelectSubset<T, MosquitoImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MosquitoImageClient<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MosquitoImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoImageFindFirstArgs} args - Arguments to find a MosquitoImage
     * @example
     * // Get one MosquitoImage
     * const mosquitoImage = await prisma.mosquitoImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MosquitoImageFindFirstArgs>(args?: SelectSubset<T, MosquitoImageFindFirstArgs<ExtArgs>>): Prisma__MosquitoImageClient<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MosquitoImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoImageFindFirstOrThrowArgs} args - Arguments to find a MosquitoImage
     * @example
     * // Get one MosquitoImage
     * const mosquitoImage = await prisma.mosquitoImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MosquitoImageFindFirstOrThrowArgs>(args?: SelectSubset<T, MosquitoImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MosquitoImageClient<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MosquitoImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MosquitoImages
     * const mosquitoImages = await prisma.mosquitoImage.findMany()
     * 
     * // Get first 10 MosquitoImages
     * const mosquitoImages = await prisma.mosquitoImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mosquitoImageWithIdOnly = await prisma.mosquitoImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MosquitoImageFindManyArgs>(args?: SelectSubset<T, MosquitoImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MosquitoImage.
     * @param {MosquitoImageCreateArgs} args - Arguments to create a MosquitoImage.
     * @example
     * // Create one MosquitoImage
     * const MosquitoImage = await prisma.mosquitoImage.create({
     *   data: {
     *     // ... data to create a MosquitoImage
     *   }
     * })
     * 
     */
    create<T extends MosquitoImageCreateArgs>(args: SelectSubset<T, MosquitoImageCreateArgs<ExtArgs>>): Prisma__MosquitoImageClient<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MosquitoImages.
     * @param {MosquitoImageCreateManyArgs} args - Arguments to create many MosquitoImages.
     * @example
     * // Create many MosquitoImages
     * const mosquitoImage = await prisma.mosquitoImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MosquitoImageCreateManyArgs>(args?: SelectSubset<T, MosquitoImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MosquitoImage.
     * @param {MosquitoImageDeleteArgs} args - Arguments to delete one MosquitoImage.
     * @example
     * // Delete one MosquitoImage
     * const MosquitoImage = await prisma.mosquitoImage.delete({
     *   where: {
     *     // ... filter to delete one MosquitoImage
     *   }
     * })
     * 
     */
    delete<T extends MosquitoImageDeleteArgs>(args: SelectSubset<T, MosquitoImageDeleteArgs<ExtArgs>>): Prisma__MosquitoImageClient<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MosquitoImage.
     * @param {MosquitoImageUpdateArgs} args - Arguments to update one MosquitoImage.
     * @example
     * // Update one MosquitoImage
     * const mosquitoImage = await prisma.mosquitoImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MosquitoImageUpdateArgs>(args: SelectSubset<T, MosquitoImageUpdateArgs<ExtArgs>>): Prisma__MosquitoImageClient<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MosquitoImages.
     * @param {MosquitoImageDeleteManyArgs} args - Arguments to filter MosquitoImages to delete.
     * @example
     * // Delete a few MosquitoImages
     * const { count } = await prisma.mosquitoImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MosquitoImageDeleteManyArgs>(args?: SelectSubset<T, MosquitoImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MosquitoImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MosquitoImages
     * const mosquitoImage = await prisma.mosquitoImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MosquitoImageUpdateManyArgs>(args: SelectSubset<T, MosquitoImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MosquitoImage.
     * @param {MosquitoImageUpsertArgs} args - Arguments to update or create a MosquitoImage.
     * @example
     * // Update or create a MosquitoImage
     * const mosquitoImage = await prisma.mosquitoImage.upsert({
     *   create: {
     *     // ... data to create a MosquitoImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MosquitoImage we want to update
     *   }
     * })
     */
    upsert<T extends MosquitoImageUpsertArgs>(args: SelectSubset<T, MosquitoImageUpsertArgs<ExtArgs>>): Prisma__MosquitoImageClient<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MosquitoImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoImageCountArgs} args - Arguments to filter MosquitoImages to count.
     * @example
     * // Count the number of MosquitoImages
     * const count = await prisma.mosquitoImage.count({
     *   where: {
     *     // ... the filter for the MosquitoImages we want to count
     *   }
     * })
    **/
    count<T extends MosquitoImageCountArgs>(
      args?: Subset<T, MosquitoImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MosquitoImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MosquitoImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MosquitoImageAggregateArgs>(args: Subset<T, MosquitoImageAggregateArgs>): Prisma.PrismaPromise<GetMosquitoImageAggregateType<T>>

    /**
     * Group by MosquitoImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MosquitoImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MosquitoImageGroupByArgs['orderBy'] }
        : { orderBy?: MosquitoImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MosquitoImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMosquitoImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MosquitoImage model
   */
  readonly fields: MosquitoImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MosquitoImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MosquitoImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mosquito<T extends MosquitoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MosquitoDefaultArgs<ExtArgs>>): Prisma__MosquitoClient<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    image<T extends ImageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ImageDefaultArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MosquitoImage model
   */
  interface MosquitoImageFieldRefs {
    readonly id: FieldRef<"MosquitoImage", 'Int'>
    readonly mosquitoId: FieldRef<"MosquitoImage", 'Int'>
    readonly imageId: FieldRef<"MosquitoImage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MosquitoImage findUnique
   */
  export type MosquitoImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    /**
     * Filter, which MosquitoImage to fetch.
     */
    where: MosquitoImageWhereUniqueInput
  }

  /**
   * MosquitoImage findUniqueOrThrow
   */
  export type MosquitoImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    /**
     * Filter, which MosquitoImage to fetch.
     */
    where: MosquitoImageWhereUniqueInput
  }

  /**
   * MosquitoImage findFirst
   */
  export type MosquitoImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    /**
     * Filter, which MosquitoImage to fetch.
     */
    where?: MosquitoImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MosquitoImages to fetch.
     */
    orderBy?: MosquitoImageOrderByWithRelationInput | MosquitoImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MosquitoImages.
     */
    cursor?: MosquitoImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MosquitoImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MosquitoImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MosquitoImages.
     */
    distinct?: MosquitoImageScalarFieldEnum | MosquitoImageScalarFieldEnum[]
  }

  /**
   * MosquitoImage findFirstOrThrow
   */
  export type MosquitoImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    /**
     * Filter, which MosquitoImage to fetch.
     */
    where?: MosquitoImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MosquitoImages to fetch.
     */
    orderBy?: MosquitoImageOrderByWithRelationInput | MosquitoImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MosquitoImages.
     */
    cursor?: MosquitoImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MosquitoImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MosquitoImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MosquitoImages.
     */
    distinct?: MosquitoImageScalarFieldEnum | MosquitoImageScalarFieldEnum[]
  }

  /**
   * MosquitoImage findMany
   */
  export type MosquitoImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    /**
     * Filter, which MosquitoImages to fetch.
     */
    where?: MosquitoImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MosquitoImages to fetch.
     */
    orderBy?: MosquitoImageOrderByWithRelationInput | MosquitoImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MosquitoImages.
     */
    cursor?: MosquitoImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MosquitoImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MosquitoImages.
     */
    skip?: number
    distinct?: MosquitoImageScalarFieldEnum | MosquitoImageScalarFieldEnum[]
  }

  /**
   * MosquitoImage create
   */
  export type MosquitoImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    /**
     * The data needed to create a MosquitoImage.
     */
    data: XOR<MosquitoImageCreateInput, MosquitoImageUncheckedCreateInput>
  }

  /**
   * MosquitoImage createMany
   */
  export type MosquitoImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MosquitoImages.
     */
    data: MosquitoImageCreateManyInput | MosquitoImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MosquitoImage update
   */
  export type MosquitoImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    /**
     * The data needed to update a MosquitoImage.
     */
    data: XOR<MosquitoImageUpdateInput, MosquitoImageUncheckedUpdateInput>
    /**
     * Choose, which MosquitoImage to update.
     */
    where: MosquitoImageWhereUniqueInput
  }

  /**
   * MosquitoImage updateMany
   */
  export type MosquitoImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MosquitoImages.
     */
    data: XOR<MosquitoImageUpdateManyMutationInput, MosquitoImageUncheckedUpdateManyInput>
    /**
     * Filter which MosquitoImages to update
     */
    where?: MosquitoImageWhereInput
    /**
     * Limit how many MosquitoImages to update.
     */
    limit?: number
  }

  /**
   * MosquitoImage upsert
   */
  export type MosquitoImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    /**
     * The filter to search for the MosquitoImage to update in case it exists.
     */
    where: MosquitoImageWhereUniqueInput
    /**
     * In case the MosquitoImage found by the `where` argument doesn't exist, create a new MosquitoImage with this data.
     */
    create: XOR<MosquitoImageCreateInput, MosquitoImageUncheckedCreateInput>
    /**
     * In case the MosquitoImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MosquitoImageUpdateInput, MosquitoImageUncheckedUpdateInput>
  }

  /**
   * MosquitoImage delete
   */
  export type MosquitoImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    /**
     * Filter which MosquitoImage to delete.
     */
    where: MosquitoImageWhereUniqueInput
  }

  /**
   * MosquitoImage deleteMany
   */
  export type MosquitoImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MosquitoImages to delete
     */
    where?: MosquitoImageWhereInput
    /**
     * Limit how many MosquitoImages to delete.
     */
    limit?: number
  }

  /**
   * MosquitoImage without action
   */
  export type MosquitoImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
  }


  /**
   * Model Mosquito
   */

  export type AggregateMosquito = {
    _count: MosquitoCountAggregateOutputType | null
    _avg: MosquitoAvgAggregateOutputType | null
    _sum: MosquitoSumAggregateOutputType | null
    _min: MosquitoMinAggregateOutputType | null
    _max: MosquitoMaxAggregateOutputType | null
  }

  export type MosquitoAvgAggregateOutputType = {
    id: number | null
  }

  export type MosquitoSumAggregateOutputType = {
    id: number | null
  }

  export type MosquitoMinAggregateOutputType = {
    id: number | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MosquitoMaxAggregateOutputType = {
    id: number | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MosquitoCountAggregateOutputType = {
    id: number
    title: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MosquitoAvgAggregateInputType = {
    id?: true
  }

  export type MosquitoSumAggregateInputType = {
    id?: true
  }

  export type MosquitoMinAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MosquitoMaxAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MosquitoCountAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MosquitoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mosquito to aggregate.
     */
    where?: MosquitoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mosquitos to fetch.
     */
    orderBy?: MosquitoOrderByWithRelationInput | MosquitoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MosquitoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mosquitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mosquitos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mosquitos
    **/
    _count?: true | MosquitoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MosquitoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MosquitoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MosquitoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MosquitoMaxAggregateInputType
  }

  export type GetMosquitoAggregateType<T extends MosquitoAggregateArgs> = {
        [P in keyof T & keyof AggregateMosquito]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMosquito[P]>
      : GetScalarType<T[P], AggregateMosquito[P]>
  }




  export type MosquitoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MosquitoWhereInput
    orderBy?: MosquitoOrderByWithAggregationInput | MosquitoOrderByWithAggregationInput[]
    by: MosquitoScalarFieldEnum[] | MosquitoScalarFieldEnum
    having?: MosquitoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MosquitoCountAggregateInputType | true
    _avg?: MosquitoAvgAggregateInputType
    _sum?: MosquitoSumAggregateInputType
    _min?: MosquitoMinAggregateInputType
    _max?: MosquitoMaxAggregateInputType
  }

  export type MosquitoGroupByOutputType = {
    id: number
    title: string
    createdAt: Date
    updatedAt: Date
    _count: MosquitoCountAggregateOutputType | null
    _avg: MosquitoAvgAggregateOutputType | null
    _sum: MosquitoSumAggregateOutputType | null
    _min: MosquitoMinAggregateOutputType | null
    _max: MosquitoMaxAggregateOutputType | null
  }

  type GetMosquitoGroupByPayload<T extends MosquitoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MosquitoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MosquitoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MosquitoGroupByOutputType[P]>
            : GetScalarType<T[P], MosquitoGroupByOutputType[P]>
        }
      >
    >


  export type MosquitoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    images?: boolean | Mosquito$imagesArgs<ExtArgs>
    _count?: boolean | MosquitoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mosquito"]>



  export type MosquitoSelectScalar = {
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MosquitoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "createdAt" | "updatedAt", ExtArgs["result"]["mosquito"]>
  export type MosquitoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | Mosquito$imagesArgs<ExtArgs>
    _count?: boolean | MosquitoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MosquitoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mosquito"
    objects: {
      images: Prisma.$MosquitoImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mosquito"]>
    composites: {}
  }

  type MosquitoGetPayload<S extends boolean | null | undefined | MosquitoDefaultArgs> = $Result.GetResult<Prisma.$MosquitoPayload, S>

  type MosquitoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MosquitoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MosquitoCountAggregateInputType | true
    }

  export interface MosquitoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mosquito'], meta: { name: 'Mosquito' } }
    /**
     * Find zero or one Mosquito that matches the filter.
     * @param {MosquitoFindUniqueArgs} args - Arguments to find a Mosquito
     * @example
     * // Get one Mosquito
     * const mosquito = await prisma.mosquito.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MosquitoFindUniqueArgs>(args: SelectSubset<T, MosquitoFindUniqueArgs<ExtArgs>>): Prisma__MosquitoClient<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Mosquito that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MosquitoFindUniqueOrThrowArgs} args - Arguments to find a Mosquito
     * @example
     * // Get one Mosquito
     * const mosquito = await prisma.mosquito.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MosquitoFindUniqueOrThrowArgs>(args: SelectSubset<T, MosquitoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MosquitoClient<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mosquito that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoFindFirstArgs} args - Arguments to find a Mosquito
     * @example
     * // Get one Mosquito
     * const mosquito = await prisma.mosquito.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MosquitoFindFirstArgs>(args?: SelectSubset<T, MosquitoFindFirstArgs<ExtArgs>>): Prisma__MosquitoClient<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mosquito that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoFindFirstOrThrowArgs} args - Arguments to find a Mosquito
     * @example
     * // Get one Mosquito
     * const mosquito = await prisma.mosquito.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MosquitoFindFirstOrThrowArgs>(args?: SelectSubset<T, MosquitoFindFirstOrThrowArgs<ExtArgs>>): Prisma__MosquitoClient<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Mosquitos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mosquitos
     * const mosquitos = await prisma.mosquito.findMany()
     * 
     * // Get first 10 Mosquitos
     * const mosquitos = await prisma.mosquito.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mosquitoWithIdOnly = await prisma.mosquito.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MosquitoFindManyArgs>(args?: SelectSubset<T, MosquitoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Mosquito.
     * @param {MosquitoCreateArgs} args - Arguments to create a Mosquito.
     * @example
     * // Create one Mosquito
     * const Mosquito = await prisma.mosquito.create({
     *   data: {
     *     // ... data to create a Mosquito
     *   }
     * })
     * 
     */
    create<T extends MosquitoCreateArgs>(args: SelectSubset<T, MosquitoCreateArgs<ExtArgs>>): Prisma__MosquitoClient<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Mosquitos.
     * @param {MosquitoCreateManyArgs} args - Arguments to create many Mosquitos.
     * @example
     * // Create many Mosquitos
     * const mosquito = await prisma.mosquito.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MosquitoCreateManyArgs>(args?: SelectSubset<T, MosquitoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mosquito.
     * @param {MosquitoDeleteArgs} args - Arguments to delete one Mosquito.
     * @example
     * // Delete one Mosquito
     * const Mosquito = await prisma.mosquito.delete({
     *   where: {
     *     // ... filter to delete one Mosquito
     *   }
     * })
     * 
     */
    delete<T extends MosquitoDeleteArgs>(args: SelectSubset<T, MosquitoDeleteArgs<ExtArgs>>): Prisma__MosquitoClient<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Mosquito.
     * @param {MosquitoUpdateArgs} args - Arguments to update one Mosquito.
     * @example
     * // Update one Mosquito
     * const mosquito = await prisma.mosquito.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MosquitoUpdateArgs>(args: SelectSubset<T, MosquitoUpdateArgs<ExtArgs>>): Prisma__MosquitoClient<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Mosquitos.
     * @param {MosquitoDeleteManyArgs} args - Arguments to filter Mosquitos to delete.
     * @example
     * // Delete a few Mosquitos
     * const { count } = await prisma.mosquito.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MosquitoDeleteManyArgs>(args?: SelectSubset<T, MosquitoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mosquitos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mosquitos
     * const mosquito = await prisma.mosquito.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MosquitoUpdateManyArgs>(args: SelectSubset<T, MosquitoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mosquito.
     * @param {MosquitoUpsertArgs} args - Arguments to update or create a Mosquito.
     * @example
     * // Update or create a Mosquito
     * const mosquito = await prisma.mosquito.upsert({
     *   create: {
     *     // ... data to create a Mosquito
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mosquito we want to update
     *   }
     * })
     */
    upsert<T extends MosquitoUpsertArgs>(args: SelectSubset<T, MosquitoUpsertArgs<ExtArgs>>): Prisma__MosquitoClient<$Result.GetResult<Prisma.$MosquitoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Mosquitos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoCountArgs} args - Arguments to filter Mosquitos to count.
     * @example
     * // Count the number of Mosquitos
     * const count = await prisma.mosquito.count({
     *   where: {
     *     // ... the filter for the Mosquitos we want to count
     *   }
     * })
    **/
    count<T extends MosquitoCountArgs>(
      args?: Subset<T, MosquitoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MosquitoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mosquito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MosquitoAggregateArgs>(args: Subset<T, MosquitoAggregateArgs>): Prisma.PrismaPromise<GetMosquitoAggregateType<T>>

    /**
     * Group by Mosquito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MosquitoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MosquitoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MosquitoGroupByArgs['orderBy'] }
        : { orderBy?: MosquitoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MosquitoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMosquitoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mosquito model
   */
  readonly fields: MosquitoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mosquito.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MosquitoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends Mosquito$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Mosquito$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MosquitoImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mosquito model
   */
  interface MosquitoFieldRefs {
    readonly id: FieldRef<"Mosquito", 'Int'>
    readonly title: FieldRef<"Mosquito", 'String'>
    readonly createdAt: FieldRef<"Mosquito", 'DateTime'>
    readonly updatedAt: FieldRef<"Mosquito", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Mosquito findUnique
   */
  export type MosquitoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
    /**
     * Filter, which Mosquito to fetch.
     */
    where: MosquitoWhereUniqueInput
  }

  /**
   * Mosquito findUniqueOrThrow
   */
  export type MosquitoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
    /**
     * Filter, which Mosquito to fetch.
     */
    where: MosquitoWhereUniqueInput
  }

  /**
   * Mosquito findFirst
   */
  export type MosquitoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
    /**
     * Filter, which Mosquito to fetch.
     */
    where?: MosquitoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mosquitos to fetch.
     */
    orderBy?: MosquitoOrderByWithRelationInput | MosquitoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mosquitos.
     */
    cursor?: MosquitoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mosquitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mosquitos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mosquitos.
     */
    distinct?: MosquitoScalarFieldEnum | MosquitoScalarFieldEnum[]
  }

  /**
   * Mosquito findFirstOrThrow
   */
  export type MosquitoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
    /**
     * Filter, which Mosquito to fetch.
     */
    where?: MosquitoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mosquitos to fetch.
     */
    orderBy?: MosquitoOrderByWithRelationInput | MosquitoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mosquitos.
     */
    cursor?: MosquitoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mosquitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mosquitos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mosquitos.
     */
    distinct?: MosquitoScalarFieldEnum | MosquitoScalarFieldEnum[]
  }

  /**
   * Mosquito findMany
   */
  export type MosquitoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
    /**
     * Filter, which Mosquitos to fetch.
     */
    where?: MosquitoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mosquitos to fetch.
     */
    orderBy?: MosquitoOrderByWithRelationInput | MosquitoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mosquitos.
     */
    cursor?: MosquitoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mosquitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mosquitos.
     */
    skip?: number
    distinct?: MosquitoScalarFieldEnum | MosquitoScalarFieldEnum[]
  }

  /**
   * Mosquito create
   */
  export type MosquitoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
    /**
     * The data needed to create a Mosquito.
     */
    data: XOR<MosquitoCreateInput, MosquitoUncheckedCreateInput>
  }

  /**
   * Mosquito createMany
   */
  export type MosquitoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mosquitos.
     */
    data: MosquitoCreateManyInput | MosquitoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mosquito update
   */
  export type MosquitoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
    /**
     * The data needed to update a Mosquito.
     */
    data: XOR<MosquitoUpdateInput, MosquitoUncheckedUpdateInput>
    /**
     * Choose, which Mosquito to update.
     */
    where: MosquitoWhereUniqueInput
  }

  /**
   * Mosquito updateMany
   */
  export type MosquitoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mosquitos.
     */
    data: XOR<MosquitoUpdateManyMutationInput, MosquitoUncheckedUpdateManyInput>
    /**
     * Filter which Mosquitos to update
     */
    where?: MosquitoWhereInput
    /**
     * Limit how many Mosquitos to update.
     */
    limit?: number
  }

  /**
   * Mosquito upsert
   */
  export type MosquitoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
    /**
     * The filter to search for the Mosquito to update in case it exists.
     */
    where: MosquitoWhereUniqueInput
    /**
     * In case the Mosquito found by the `where` argument doesn't exist, create a new Mosquito with this data.
     */
    create: XOR<MosquitoCreateInput, MosquitoUncheckedCreateInput>
    /**
     * In case the Mosquito was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MosquitoUpdateInput, MosquitoUncheckedUpdateInput>
  }

  /**
   * Mosquito delete
   */
  export type MosquitoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
    /**
     * Filter which Mosquito to delete.
     */
    where: MosquitoWhereUniqueInput
  }

  /**
   * Mosquito deleteMany
   */
  export type MosquitoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mosquitos to delete
     */
    where?: MosquitoWhereInput
    /**
     * Limit how many Mosquitos to delete.
     */
    limit?: number
  }

  /**
   * Mosquito.images
   */
  export type Mosquito$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MosquitoImage
     */
    select?: MosquitoImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MosquitoImage
     */
    omit?: MosquitoImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoImageInclude<ExtArgs> | null
    where?: MosquitoImageWhereInput
    orderBy?: MosquitoImageOrderByWithRelationInput | MosquitoImageOrderByWithRelationInput[]
    cursor?: MosquitoImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MosquitoImageScalarFieldEnum | MosquitoImageScalarFieldEnum[]
  }

  /**
   * Mosquito without action
   */
  export type MosquitoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mosquito
     */
    select?: MosquitoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mosquito
     */
    omit?: MosquitoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MosquitoInclude<ExtArgs> | null
  }


  /**
   * Model Survey
   */

  export type AggregateSurvey = {
    _count: SurveyCountAggregateOutputType | null
    _avg: SurveyAvgAggregateOutputType | null
    _sum: SurveySumAggregateOutputType | null
    _min: SurveyMinAggregateOutputType | null
    _max: SurveyMaxAggregateOutputType | null
  }

  export type SurveyAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    healthCenterId: number | null
    jumlah_anggota_keluarga: number | null
    jumlah_penampungan_air: number | null
    jumlah_jentik: number | null
  }

  export type SurveySumAggregateOutputType = {
    id: number | null
    userId: number | null
    healthCenterId: number | null
    jumlah_anggota_keluarga: number | null
    jumlah_penampungan_air: number | null
    jumlah_jentik: number | null
  }

  export type SurveyMinAggregateOutputType = {
    id: number | null
    userId: number | null
    healthCenterId: number | null
    nama_lengkap_responden: string | null
    kelurahan: string | null
    rt: string | null
    rw: string | null
    jumlah_anggota_keluarga: number | null
    jumlah_penampungan_air: number | null
    jumlah_jentik: number | null
    jenis_penampungan_dirumah: string | null
    jenis_penampungan_diluar: string | null
    kuras_penampungan_air: string | null
    terkena_dbd: string | null
    bukti_gambar: string | null
    catatan: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SurveyMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    healthCenterId: number | null
    nama_lengkap_responden: string | null
    kelurahan: string | null
    rt: string | null
    rw: string | null
    jumlah_anggota_keluarga: number | null
    jumlah_penampungan_air: number | null
    jumlah_jentik: number | null
    jenis_penampungan_dirumah: string | null
    jenis_penampungan_diluar: string | null
    kuras_penampungan_air: string | null
    terkena_dbd: string | null
    bukti_gambar: string | null
    catatan: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SurveyCountAggregateOutputType = {
    id: number
    userId: number
    healthCenterId: number
    nama_lengkap_responden: number
    kelurahan: number
    rt: number
    rw: number
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: number
    jenis_penampungan_diluar: number
    kuras_penampungan_air: number
    terkena_dbd: number
    bukti_gambar: number
    catatan: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SurveyAvgAggregateInputType = {
    id?: true
    userId?: true
    healthCenterId?: true
    jumlah_anggota_keluarga?: true
    jumlah_penampungan_air?: true
    jumlah_jentik?: true
  }

  export type SurveySumAggregateInputType = {
    id?: true
    userId?: true
    healthCenterId?: true
    jumlah_anggota_keluarga?: true
    jumlah_penampungan_air?: true
    jumlah_jentik?: true
  }

  export type SurveyMinAggregateInputType = {
    id?: true
    userId?: true
    healthCenterId?: true
    nama_lengkap_responden?: true
    kelurahan?: true
    rt?: true
    rw?: true
    jumlah_anggota_keluarga?: true
    jumlah_penampungan_air?: true
    jumlah_jentik?: true
    jenis_penampungan_dirumah?: true
    jenis_penampungan_diluar?: true
    kuras_penampungan_air?: true
    terkena_dbd?: true
    bukti_gambar?: true
    catatan?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SurveyMaxAggregateInputType = {
    id?: true
    userId?: true
    healthCenterId?: true
    nama_lengkap_responden?: true
    kelurahan?: true
    rt?: true
    rw?: true
    jumlah_anggota_keluarga?: true
    jumlah_penampungan_air?: true
    jumlah_jentik?: true
    jenis_penampungan_dirumah?: true
    jenis_penampungan_diluar?: true
    kuras_penampungan_air?: true
    terkena_dbd?: true
    bukti_gambar?: true
    catatan?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SurveyCountAggregateInputType = {
    id?: true
    userId?: true
    healthCenterId?: true
    nama_lengkap_responden?: true
    kelurahan?: true
    rt?: true
    rw?: true
    jumlah_anggota_keluarga?: true
    jumlah_penampungan_air?: true
    jumlah_jentik?: true
    jenis_penampungan_dirumah?: true
    jenis_penampungan_diluar?: true
    kuras_penampungan_air?: true
    terkena_dbd?: true
    bukti_gambar?: true
    catatan?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SurveyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Survey to aggregate.
     */
    where?: SurveyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurveyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Surveys
    **/
    _count?: true | SurveyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SurveyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SurveySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurveyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurveyMaxAggregateInputType
  }

  export type GetSurveyAggregateType<T extends SurveyAggregateArgs> = {
        [P in keyof T & keyof AggregateSurvey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurvey[P]>
      : GetScalarType<T[P], AggregateSurvey[P]>
  }




  export type SurveyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyWhereInput
    orderBy?: SurveyOrderByWithAggregationInput | SurveyOrderByWithAggregationInput[]
    by: SurveyScalarFieldEnum[] | SurveyScalarFieldEnum
    having?: SurveyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurveyCountAggregateInputType | true
    _avg?: SurveyAvgAggregateInputType
    _sum?: SurveySumAggregateInputType
    _min?: SurveyMinAggregateInputType
    _max?: SurveyMaxAggregateInputType
  }

  export type SurveyGroupByOutputType = {
    id: number
    userId: number
    healthCenterId: number
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt: Date
    updatedAt: Date
    _count: SurveyCountAggregateOutputType | null
    _avg: SurveyAvgAggregateOutputType | null
    _sum: SurveySumAggregateOutputType | null
    _min: SurveyMinAggregateOutputType | null
    _max: SurveyMaxAggregateOutputType | null
  }

  type GetSurveyGroupByPayload<T extends SurveyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurveyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurveyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurveyGroupByOutputType[P]>
            : GetScalarType<T[P], SurveyGroupByOutputType[P]>
        }
      >
    >


  export type SurveySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    healthCenterId?: boolean
    nama_lengkap_responden?: boolean
    kelurahan?: boolean
    rt?: boolean
    rw?: boolean
    jumlah_anggota_keluarga?: boolean
    jumlah_penampungan_air?: boolean
    jumlah_jentik?: boolean
    jenis_penampungan_dirumah?: boolean
    jenis_penampungan_diluar?: boolean
    kuras_penampungan_air?: boolean
    terkena_dbd?: boolean
    bukti_gambar?: boolean
    catatan?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    healthCenter?: boolean | HealthCenterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["survey"]>



  export type SurveySelectScalar = {
    id?: boolean
    userId?: boolean
    healthCenterId?: boolean
    nama_lengkap_responden?: boolean
    kelurahan?: boolean
    rt?: boolean
    rw?: boolean
    jumlah_anggota_keluarga?: boolean
    jumlah_penampungan_air?: boolean
    jumlah_jentik?: boolean
    jenis_penampungan_dirumah?: boolean
    jenis_penampungan_diluar?: boolean
    kuras_penampungan_air?: boolean
    terkena_dbd?: boolean
    bukti_gambar?: boolean
    catatan?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SurveyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "healthCenterId" | "nama_lengkap_responden" | "kelurahan" | "rt" | "rw" | "jumlah_anggota_keluarga" | "jumlah_penampungan_air" | "jumlah_jentik" | "jenis_penampungan_dirumah" | "jenis_penampungan_diluar" | "kuras_penampungan_air" | "terkena_dbd" | "bukti_gambar" | "catatan" | "createdAt" | "updatedAt", ExtArgs["result"]["survey"]>
  export type SurveyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    healthCenter?: boolean | HealthCenterDefaultArgs<ExtArgs>
  }

  export type $SurveyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Survey"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      healthCenter: Prisma.$HealthCenterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      healthCenterId: number
      nama_lengkap_responden: string
      kelurahan: string
      rt: string
      rw: string
      jumlah_anggota_keluarga: number
      jumlah_penampungan_air: number
      jumlah_jentik: number
      jenis_penampungan_dirumah: string
      jenis_penampungan_diluar: string
      kuras_penampungan_air: string
      terkena_dbd: string
      bukti_gambar: string
      catatan: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["survey"]>
    composites: {}
  }

  type SurveyGetPayload<S extends boolean | null | undefined | SurveyDefaultArgs> = $Result.GetResult<Prisma.$SurveyPayload, S>

  type SurveyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SurveyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SurveyCountAggregateInputType | true
    }

  export interface SurveyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Survey'], meta: { name: 'Survey' } }
    /**
     * Find zero or one Survey that matches the filter.
     * @param {SurveyFindUniqueArgs} args - Arguments to find a Survey
     * @example
     * // Get one Survey
     * const survey = await prisma.survey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SurveyFindUniqueArgs>(args: SelectSubset<T, SurveyFindUniqueArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Survey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SurveyFindUniqueOrThrowArgs} args - Arguments to find a Survey
     * @example
     * // Get one Survey
     * const survey = await prisma.survey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SurveyFindUniqueOrThrowArgs>(args: SelectSubset<T, SurveyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Survey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyFindFirstArgs} args - Arguments to find a Survey
     * @example
     * // Get one Survey
     * const survey = await prisma.survey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SurveyFindFirstArgs>(args?: SelectSubset<T, SurveyFindFirstArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Survey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyFindFirstOrThrowArgs} args - Arguments to find a Survey
     * @example
     * // Get one Survey
     * const survey = await prisma.survey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SurveyFindFirstOrThrowArgs>(args?: SelectSubset<T, SurveyFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Surveys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Surveys
     * const surveys = await prisma.survey.findMany()
     * 
     * // Get first 10 Surveys
     * const surveys = await prisma.survey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const surveyWithIdOnly = await prisma.survey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SurveyFindManyArgs>(args?: SelectSubset<T, SurveyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Survey.
     * @param {SurveyCreateArgs} args - Arguments to create a Survey.
     * @example
     * // Create one Survey
     * const Survey = await prisma.survey.create({
     *   data: {
     *     // ... data to create a Survey
     *   }
     * })
     * 
     */
    create<T extends SurveyCreateArgs>(args: SelectSubset<T, SurveyCreateArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Surveys.
     * @param {SurveyCreateManyArgs} args - Arguments to create many Surveys.
     * @example
     * // Create many Surveys
     * const survey = await prisma.survey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SurveyCreateManyArgs>(args?: SelectSubset<T, SurveyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Survey.
     * @param {SurveyDeleteArgs} args - Arguments to delete one Survey.
     * @example
     * // Delete one Survey
     * const Survey = await prisma.survey.delete({
     *   where: {
     *     // ... filter to delete one Survey
     *   }
     * })
     * 
     */
    delete<T extends SurveyDeleteArgs>(args: SelectSubset<T, SurveyDeleteArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Survey.
     * @param {SurveyUpdateArgs} args - Arguments to update one Survey.
     * @example
     * // Update one Survey
     * const survey = await prisma.survey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SurveyUpdateArgs>(args: SelectSubset<T, SurveyUpdateArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Surveys.
     * @param {SurveyDeleteManyArgs} args - Arguments to filter Surveys to delete.
     * @example
     * // Delete a few Surveys
     * const { count } = await prisma.survey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SurveyDeleteManyArgs>(args?: SelectSubset<T, SurveyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Surveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Surveys
     * const survey = await prisma.survey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SurveyUpdateManyArgs>(args: SelectSubset<T, SurveyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Survey.
     * @param {SurveyUpsertArgs} args - Arguments to update or create a Survey.
     * @example
     * // Update or create a Survey
     * const survey = await prisma.survey.upsert({
     *   create: {
     *     // ... data to create a Survey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Survey we want to update
     *   }
     * })
     */
    upsert<T extends SurveyUpsertArgs>(args: SelectSubset<T, SurveyUpsertArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Surveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyCountArgs} args - Arguments to filter Surveys to count.
     * @example
     * // Count the number of Surveys
     * const count = await prisma.survey.count({
     *   where: {
     *     // ... the filter for the Surveys we want to count
     *   }
     * })
    **/
    count<T extends SurveyCountArgs>(
      args?: Subset<T, SurveyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurveyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Survey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurveyAggregateArgs>(args: Subset<T, SurveyAggregateArgs>): Prisma.PrismaPromise<GetSurveyAggregateType<T>>

    /**
     * Group by Survey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurveyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurveyGroupByArgs['orderBy'] }
        : { orderBy?: SurveyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurveyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurveyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Survey model
   */
  readonly fields: SurveyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Survey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurveyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    healthCenter<T extends HealthCenterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HealthCenterDefaultArgs<ExtArgs>>): Prisma__HealthCenterClient<$Result.GetResult<Prisma.$HealthCenterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Survey model
   */
  interface SurveyFieldRefs {
    readonly id: FieldRef<"Survey", 'Int'>
    readonly userId: FieldRef<"Survey", 'Int'>
    readonly healthCenterId: FieldRef<"Survey", 'Int'>
    readonly nama_lengkap_responden: FieldRef<"Survey", 'String'>
    readonly kelurahan: FieldRef<"Survey", 'String'>
    readonly rt: FieldRef<"Survey", 'String'>
    readonly rw: FieldRef<"Survey", 'String'>
    readonly jumlah_anggota_keluarga: FieldRef<"Survey", 'Int'>
    readonly jumlah_penampungan_air: FieldRef<"Survey", 'Int'>
    readonly jumlah_jentik: FieldRef<"Survey", 'Int'>
    readonly jenis_penampungan_dirumah: FieldRef<"Survey", 'String'>
    readonly jenis_penampungan_diluar: FieldRef<"Survey", 'String'>
    readonly kuras_penampungan_air: FieldRef<"Survey", 'String'>
    readonly terkena_dbd: FieldRef<"Survey", 'String'>
    readonly bukti_gambar: FieldRef<"Survey", 'String'>
    readonly catatan: FieldRef<"Survey", 'String'>
    readonly createdAt: FieldRef<"Survey", 'DateTime'>
    readonly updatedAt: FieldRef<"Survey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Survey findUnique
   */
  export type SurveyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Survey to fetch.
     */
    where: SurveyWhereUniqueInput
  }

  /**
   * Survey findUniqueOrThrow
   */
  export type SurveyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Survey to fetch.
     */
    where: SurveyWhereUniqueInput
  }

  /**
   * Survey findFirst
   */
  export type SurveyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Survey to fetch.
     */
    where?: SurveyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surveys.
     */
    cursor?: SurveyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surveys.
     */
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * Survey findFirstOrThrow
   */
  export type SurveyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Survey to fetch.
     */
    where?: SurveyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surveys.
     */
    cursor?: SurveyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surveys.
     */
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * Survey findMany
   */
  export type SurveyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Surveys to fetch.
     */
    where?: SurveyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Surveys.
     */
    cursor?: SurveyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * Survey create
   */
  export type SurveyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * The data needed to create a Survey.
     */
    data: XOR<SurveyCreateInput, SurveyUncheckedCreateInput>
  }

  /**
   * Survey createMany
   */
  export type SurveyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Surveys.
     */
    data: SurveyCreateManyInput | SurveyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Survey update
   */
  export type SurveyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * The data needed to update a Survey.
     */
    data: XOR<SurveyUpdateInput, SurveyUncheckedUpdateInput>
    /**
     * Choose, which Survey to update.
     */
    where: SurveyWhereUniqueInput
  }

  /**
   * Survey updateMany
   */
  export type SurveyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Surveys.
     */
    data: XOR<SurveyUpdateManyMutationInput, SurveyUncheckedUpdateManyInput>
    /**
     * Filter which Surveys to update
     */
    where?: SurveyWhereInput
    /**
     * Limit how many Surveys to update.
     */
    limit?: number
  }

  /**
   * Survey upsert
   */
  export type SurveyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * The filter to search for the Survey to update in case it exists.
     */
    where: SurveyWhereUniqueInput
    /**
     * In case the Survey found by the `where` argument doesn't exist, create a new Survey with this data.
     */
    create: XOR<SurveyCreateInput, SurveyUncheckedCreateInput>
    /**
     * In case the Survey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurveyUpdateInput, SurveyUncheckedUpdateInput>
  }

  /**
   * Survey delete
   */
  export type SurveyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter which Survey to delete.
     */
    where: SurveyWhereUniqueInput
  }

  /**
   * Survey deleteMany
   */
  export type SurveyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Surveys to delete
     */
    where?: SurveyWhereInput
    /**
     * Limit how many Surveys to delete.
     */
    limit?: number
  }

  /**
   * Survey without action
   */
  export type SurveyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    name: 'name',
    email: 'email',
    password: 'password',
    status: 'status',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BlacklistedTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    expiredAt: 'expiredAt',
    createdAt: 'createdAt'
  };

  export type BlacklistedTokenScalarFieldEnum = (typeof BlacklistedTokenScalarFieldEnum)[keyof typeof BlacklistedTokenScalarFieldEnum]


  export const HealthCenterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HealthCenterScalarFieldEnum = (typeof HealthCenterScalarFieldEnum)[keyof typeof HealthCenterScalarFieldEnum]


  export const EducationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    imagePath: 'imagePath',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const EducationImageScalarFieldEnum: {
    id: 'id',
    educationId: 'educationId',
    imageId: 'imageId'
  };

  export type EducationImageScalarFieldEnum = (typeof EducationImageScalarFieldEnum)[keyof typeof EducationImageScalarFieldEnum]


  export const VideoScalarFieldEnum: {
    id: 'id',
    title: 'title',
    url: 'url',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VideoScalarFieldEnum = (typeof VideoScalarFieldEnum)[keyof typeof VideoScalarFieldEnum]


  export const MosquitoImageScalarFieldEnum: {
    id: 'id',
    mosquitoId: 'mosquitoId',
    imageId: 'imageId'
  };

  export type MosquitoImageScalarFieldEnum = (typeof MosquitoImageScalarFieldEnum)[keyof typeof MosquitoImageScalarFieldEnum]


  export const MosquitoScalarFieldEnum: {
    id: 'id',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MosquitoScalarFieldEnum = (typeof MosquitoScalarFieldEnum)[keyof typeof MosquitoScalarFieldEnum]


  export const SurveyScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    healthCenterId: 'healthCenterId',
    nama_lengkap_responden: 'nama_lengkap_responden',
    kelurahan: 'kelurahan',
    rt: 'rt',
    rw: 'rw',
    jumlah_anggota_keluarga: 'jumlah_anggota_keluarga',
    jumlah_penampungan_air: 'jumlah_penampungan_air',
    jumlah_jentik: 'jumlah_jentik',
    jenis_penampungan_dirumah: 'jenis_penampungan_dirumah',
    jenis_penampungan_diluar: 'jenis_penampungan_diluar',
    kuras_penampungan_air: 'kuras_penampungan_air',
    terkena_dbd: 'terkena_dbd',
    bukti_gambar: 'bukti_gambar',
    catatan: 'catatan',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SurveyScalarFieldEnum = (typeof SurveyScalarFieldEnum)[keyof typeof SurveyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    username: 'username',
    name: 'name',
    email: 'email',
    password: 'password'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const BlacklistedTokenOrderByRelevanceFieldEnum: {
    token: 'token'
  };

  export type BlacklistedTokenOrderByRelevanceFieldEnum = (typeof BlacklistedTokenOrderByRelevanceFieldEnum)[keyof typeof BlacklistedTokenOrderByRelevanceFieldEnum]


  export const HealthCenterOrderByRelevanceFieldEnum: {
    name: 'name',
    image: 'image'
  };

  export type HealthCenterOrderByRelevanceFieldEnum = (typeof HealthCenterOrderByRelevanceFieldEnum)[keyof typeof HealthCenterOrderByRelevanceFieldEnum]


  export const EducationOrderByRelevanceFieldEnum: {
    title: 'title'
  };

  export type EducationOrderByRelevanceFieldEnum = (typeof EducationOrderByRelevanceFieldEnum)[keyof typeof EducationOrderByRelevanceFieldEnum]


  export const ImageOrderByRelevanceFieldEnum: {
    imagePath: 'imagePath'
  };

  export type ImageOrderByRelevanceFieldEnum = (typeof ImageOrderByRelevanceFieldEnum)[keyof typeof ImageOrderByRelevanceFieldEnum]


  export const VideoOrderByRelevanceFieldEnum: {
    title: 'title',
    url: 'url'
  };

  export type VideoOrderByRelevanceFieldEnum = (typeof VideoOrderByRelevanceFieldEnum)[keyof typeof VideoOrderByRelevanceFieldEnum]


  export const MosquitoOrderByRelevanceFieldEnum: {
    title: 'title'
  };

  export type MosquitoOrderByRelevanceFieldEnum = (typeof MosquitoOrderByRelevanceFieldEnum)[keyof typeof MosquitoOrderByRelevanceFieldEnum]


  export const SurveyOrderByRelevanceFieldEnum: {
    nama_lengkap_responden: 'nama_lengkap_responden',
    kelurahan: 'kelurahan',
    rt: 'rt',
    rw: 'rw',
    jenis_penampungan_dirumah: 'jenis_penampungan_dirumah',
    jenis_penampungan_diluar: 'jenis_penampungan_diluar',
    kuras_penampungan_air: 'kuras_penampungan_air',
    terkena_dbd: 'terkena_dbd',
    bukti_gambar: 'bukti_gambar',
    catatan: 'catatan'
  };

  export type SurveyOrderByRelevanceFieldEnum = (typeof SurveyOrderByRelevanceFieldEnum)[keyof typeof SurveyOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    status?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Survey?: SurveyListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Survey?: SurveyOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    status?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Survey?: SurveyListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    status?: BoolWithAggregatesFilter<"User"> | boolean
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type BlacklistedTokenWhereInput = {
    AND?: BlacklistedTokenWhereInput | BlacklistedTokenWhereInput[]
    OR?: BlacklistedTokenWhereInput[]
    NOT?: BlacklistedTokenWhereInput | BlacklistedTokenWhereInput[]
    id?: IntFilter<"BlacklistedToken"> | number
    token?: StringFilter<"BlacklistedToken"> | string
    expiredAt?: DateTimeFilter<"BlacklistedToken"> | Date | string
    createdAt?: DateTimeFilter<"BlacklistedToken"> | Date | string
  }

  export type BlacklistedTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
    _relevance?: BlacklistedTokenOrderByRelevanceInput
  }

  export type BlacklistedTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: BlacklistedTokenWhereInput | BlacklistedTokenWhereInput[]
    OR?: BlacklistedTokenWhereInput[]
    NOT?: BlacklistedTokenWhereInput | BlacklistedTokenWhereInput[]
    expiredAt?: DateTimeFilter<"BlacklistedToken"> | Date | string
    createdAt?: DateTimeFilter<"BlacklistedToken"> | Date | string
  }, "id" | "token">

  export type BlacklistedTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
    _count?: BlacklistedTokenCountOrderByAggregateInput
    _avg?: BlacklistedTokenAvgOrderByAggregateInput
    _max?: BlacklistedTokenMaxOrderByAggregateInput
    _min?: BlacklistedTokenMinOrderByAggregateInput
    _sum?: BlacklistedTokenSumOrderByAggregateInput
  }

  export type BlacklistedTokenScalarWhereWithAggregatesInput = {
    AND?: BlacklistedTokenScalarWhereWithAggregatesInput | BlacklistedTokenScalarWhereWithAggregatesInput[]
    OR?: BlacklistedTokenScalarWhereWithAggregatesInput[]
    NOT?: BlacklistedTokenScalarWhereWithAggregatesInput | BlacklistedTokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BlacklistedToken"> | number
    token?: StringWithAggregatesFilter<"BlacklistedToken"> | string
    expiredAt?: DateTimeWithAggregatesFilter<"BlacklistedToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"BlacklistedToken"> | Date | string
  }

  export type HealthCenterWhereInput = {
    AND?: HealthCenterWhereInput | HealthCenterWhereInput[]
    OR?: HealthCenterWhereInput[]
    NOT?: HealthCenterWhereInput | HealthCenterWhereInput[]
    id?: IntFilter<"HealthCenter"> | number
    name?: StringFilter<"HealthCenter"> | string
    image?: StringFilter<"HealthCenter"> | string
    createdAt?: DateTimeFilter<"HealthCenter"> | Date | string
    updatedAt?: DateTimeFilter<"HealthCenter"> | Date | string
    Survey?: SurveyListRelationFilter
  }

  export type HealthCenterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Survey?: SurveyOrderByRelationAggregateInput
    _relevance?: HealthCenterOrderByRelevanceInput
  }

  export type HealthCenterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HealthCenterWhereInput | HealthCenterWhereInput[]
    OR?: HealthCenterWhereInput[]
    NOT?: HealthCenterWhereInput | HealthCenterWhereInput[]
    name?: StringFilter<"HealthCenter"> | string
    image?: StringFilter<"HealthCenter"> | string
    createdAt?: DateTimeFilter<"HealthCenter"> | Date | string
    updatedAt?: DateTimeFilter<"HealthCenter"> | Date | string
    Survey?: SurveyListRelationFilter
  }, "id">

  export type HealthCenterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HealthCenterCountOrderByAggregateInput
    _avg?: HealthCenterAvgOrderByAggregateInput
    _max?: HealthCenterMaxOrderByAggregateInput
    _min?: HealthCenterMinOrderByAggregateInput
    _sum?: HealthCenterSumOrderByAggregateInput
  }

  export type HealthCenterScalarWhereWithAggregatesInput = {
    AND?: HealthCenterScalarWhereWithAggregatesInput | HealthCenterScalarWhereWithAggregatesInput[]
    OR?: HealthCenterScalarWhereWithAggregatesInput[]
    NOT?: HealthCenterScalarWhereWithAggregatesInput | HealthCenterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HealthCenter"> | number
    name?: StringWithAggregatesFilter<"HealthCenter"> | string
    image?: StringWithAggregatesFilter<"HealthCenter"> | string
    createdAt?: DateTimeWithAggregatesFilter<"HealthCenter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HealthCenter"> | Date | string
  }

  export type EducationWhereInput = {
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    id?: IntFilter<"Education"> | number
    title?: StringFilter<"Education"> | string
    createdAt?: DateTimeFilter<"Education"> | Date | string
    updatedAt?: DateTimeFilter<"Education"> | Date | string
    images?: EducationImageListRelationFilter
  }

  export type EducationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    images?: EducationImageOrderByRelationAggregateInput
    _relevance?: EducationOrderByRelevanceInput
  }

  export type EducationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    title?: StringFilter<"Education"> | string
    createdAt?: DateTimeFilter<"Education"> | Date | string
    updatedAt?: DateTimeFilter<"Education"> | Date | string
    images?: EducationImageListRelationFilter
  }, "id">

  export type EducationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _avg?: EducationAvgOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
    _sum?: EducationSumOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    OR?: EducationScalarWhereWithAggregatesInput[]
    NOT?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Education"> | number
    title?: StringWithAggregatesFilter<"Education"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Education"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Education"> | Date | string
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: IntFilter<"Image"> | number
    imagePath?: StringFilter<"Image"> | string
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
    educations?: EducationImageListRelationFilter
    MosquitoImage?: MosquitoImageListRelationFilter
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    imagePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    educations?: EducationImageOrderByRelationAggregateInput
    MosquitoImage?: MosquitoImageOrderByRelationAggregateInput
    _relevance?: ImageOrderByRelevanceInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    imagePath?: StringFilter<"Image"> | string
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
    educations?: EducationImageListRelationFilter
    MosquitoImage?: MosquitoImageListRelationFilter
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    imagePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Image"> | number
    imagePath?: StringWithAggregatesFilter<"Image"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
  }

  export type EducationImageWhereInput = {
    AND?: EducationImageWhereInput | EducationImageWhereInput[]
    OR?: EducationImageWhereInput[]
    NOT?: EducationImageWhereInput | EducationImageWhereInput[]
    id?: IntFilter<"EducationImage"> | number
    educationId?: IntFilter<"EducationImage"> | number
    imageId?: IntFilter<"EducationImage"> | number
    education?: XOR<EducationScalarRelationFilter, EducationWhereInput>
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
  }

  export type EducationImageOrderByWithRelationInput = {
    id?: SortOrder
    educationId?: SortOrder
    imageId?: SortOrder
    education?: EducationOrderByWithRelationInput
    image?: ImageOrderByWithRelationInput
  }

  export type EducationImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EducationImageWhereInput | EducationImageWhereInput[]
    OR?: EducationImageWhereInput[]
    NOT?: EducationImageWhereInput | EducationImageWhereInput[]
    educationId?: IntFilter<"EducationImage"> | number
    imageId?: IntFilter<"EducationImage"> | number
    education?: XOR<EducationScalarRelationFilter, EducationWhereInput>
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
  }, "id">

  export type EducationImageOrderByWithAggregationInput = {
    id?: SortOrder
    educationId?: SortOrder
    imageId?: SortOrder
    _count?: EducationImageCountOrderByAggregateInput
    _avg?: EducationImageAvgOrderByAggregateInput
    _max?: EducationImageMaxOrderByAggregateInput
    _min?: EducationImageMinOrderByAggregateInput
    _sum?: EducationImageSumOrderByAggregateInput
  }

  export type EducationImageScalarWhereWithAggregatesInput = {
    AND?: EducationImageScalarWhereWithAggregatesInput | EducationImageScalarWhereWithAggregatesInput[]
    OR?: EducationImageScalarWhereWithAggregatesInput[]
    NOT?: EducationImageScalarWhereWithAggregatesInput | EducationImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EducationImage"> | number
    educationId?: IntWithAggregatesFilter<"EducationImage"> | number
    imageId?: IntWithAggregatesFilter<"EducationImage"> | number
  }

  export type VideoWhereInput = {
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    id?: IntFilter<"Video"> | number
    title?: StringFilter<"Video"> | string
    url?: StringFilter<"Video"> | string
    createdAt?: DateTimeFilter<"Video"> | Date | string
    updatedAt?: DateTimeFilter<"Video"> | Date | string
  }

  export type VideoOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: VideoOrderByRelevanceInput
  }

  export type VideoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    title?: StringFilter<"Video"> | string
    url?: StringFilter<"Video"> | string
    createdAt?: DateTimeFilter<"Video"> | Date | string
    updatedAt?: DateTimeFilter<"Video"> | Date | string
  }, "id">

  export type VideoOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VideoCountOrderByAggregateInput
    _avg?: VideoAvgOrderByAggregateInput
    _max?: VideoMaxOrderByAggregateInput
    _min?: VideoMinOrderByAggregateInput
    _sum?: VideoSumOrderByAggregateInput
  }

  export type VideoScalarWhereWithAggregatesInput = {
    AND?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    OR?: VideoScalarWhereWithAggregatesInput[]
    NOT?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Video"> | number
    title?: StringWithAggregatesFilter<"Video"> | string
    url?: StringWithAggregatesFilter<"Video"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Video"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Video"> | Date | string
  }

  export type MosquitoImageWhereInput = {
    AND?: MosquitoImageWhereInput | MosquitoImageWhereInput[]
    OR?: MosquitoImageWhereInput[]
    NOT?: MosquitoImageWhereInput | MosquitoImageWhereInput[]
    id?: IntFilter<"MosquitoImage"> | number
    mosquitoId?: IntFilter<"MosquitoImage"> | number
    imageId?: IntFilter<"MosquitoImage"> | number
    mosquito?: XOR<MosquitoScalarRelationFilter, MosquitoWhereInput>
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
  }

  export type MosquitoImageOrderByWithRelationInput = {
    id?: SortOrder
    mosquitoId?: SortOrder
    imageId?: SortOrder
    mosquito?: MosquitoOrderByWithRelationInput
    image?: ImageOrderByWithRelationInput
  }

  export type MosquitoImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MosquitoImageWhereInput | MosquitoImageWhereInput[]
    OR?: MosquitoImageWhereInput[]
    NOT?: MosquitoImageWhereInput | MosquitoImageWhereInput[]
    mosquitoId?: IntFilter<"MosquitoImage"> | number
    imageId?: IntFilter<"MosquitoImage"> | number
    mosquito?: XOR<MosquitoScalarRelationFilter, MosquitoWhereInput>
    image?: XOR<ImageScalarRelationFilter, ImageWhereInput>
  }, "id">

  export type MosquitoImageOrderByWithAggregationInput = {
    id?: SortOrder
    mosquitoId?: SortOrder
    imageId?: SortOrder
    _count?: MosquitoImageCountOrderByAggregateInput
    _avg?: MosquitoImageAvgOrderByAggregateInput
    _max?: MosquitoImageMaxOrderByAggregateInput
    _min?: MosquitoImageMinOrderByAggregateInput
    _sum?: MosquitoImageSumOrderByAggregateInput
  }

  export type MosquitoImageScalarWhereWithAggregatesInput = {
    AND?: MosquitoImageScalarWhereWithAggregatesInput | MosquitoImageScalarWhereWithAggregatesInput[]
    OR?: MosquitoImageScalarWhereWithAggregatesInput[]
    NOT?: MosquitoImageScalarWhereWithAggregatesInput | MosquitoImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MosquitoImage"> | number
    mosquitoId?: IntWithAggregatesFilter<"MosquitoImage"> | number
    imageId?: IntWithAggregatesFilter<"MosquitoImage"> | number
  }

  export type MosquitoWhereInput = {
    AND?: MosquitoWhereInput | MosquitoWhereInput[]
    OR?: MosquitoWhereInput[]
    NOT?: MosquitoWhereInput | MosquitoWhereInput[]
    id?: IntFilter<"Mosquito"> | number
    title?: StringFilter<"Mosquito"> | string
    createdAt?: DateTimeFilter<"Mosquito"> | Date | string
    updatedAt?: DateTimeFilter<"Mosquito"> | Date | string
    images?: MosquitoImageListRelationFilter
  }

  export type MosquitoOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    images?: MosquitoImageOrderByRelationAggregateInput
    _relevance?: MosquitoOrderByRelevanceInput
  }

  export type MosquitoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MosquitoWhereInput | MosquitoWhereInput[]
    OR?: MosquitoWhereInput[]
    NOT?: MosquitoWhereInput | MosquitoWhereInput[]
    title?: StringFilter<"Mosquito"> | string
    createdAt?: DateTimeFilter<"Mosquito"> | Date | string
    updatedAt?: DateTimeFilter<"Mosquito"> | Date | string
    images?: MosquitoImageListRelationFilter
  }, "id">

  export type MosquitoOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MosquitoCountOrderByAggregateInput
    _avg?: MosquitoAvgOrderByAggregateInput
    _max?: MosquitoMaxOrderByAggregateInput
    _min?: MosquitoMinOrderByAggregateInput
    _sum?: MosquitoSumOrderByAggregateInput
  }

  export type MosquitoScalarWhereWithAggregatesInput = {
    AND?: MosquitoScalarWhereWithAggregatesInput | MosquitoScalarWhereWithAggregatesInput[]
    OR?: MosquitoScalarWhereWithAggregatesInput[]
    NOT?: MosquitoScalarWhereWithAggregatesInput | MosquitoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Mosquito"> | number
    title?: StringWithAggregatesFilter<"Mosquito"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Mosquito"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Mosquito"> | Date | string
  }

  export type SurveyWhereInput = {
    AND?: SurveyWhereInput | SurveyWhereInput[]
    OR?: SurveyWhereInput[]
    NOT?: SurveyWhereInput | SurveyWhereInput[]
    id?: IntFilter<"Survey"> | number
    userId?: IntFilter<"Survey"> | number
    healthCenterId?: IntFilter<"Survey"> | number
    nama_lengkap_responden?: StringFilter<"Survey"> | string
    kelurahan?: StringFilter<"Survey"> | string
    rt?: StringFilter<"Survey"> | string
    rw?: StringFilter<"Survey"> | string
    jumlah_anggota_keluarga?: IntFilter<"Survey"> | number
    jumlah_penampungan_air?: IntFilter<"Survey"> | number
    jumlah_jentik?: IntFilter<"Survey"> | number
    jenis_penampungan_dirumah?: StringFilter<"Survey"> | string
    jenis_penampungan_diluar?: StringFilter<"Survey"> | string
    kuras_penampungan_air?: StringFilter<"Survey"> | string
    terkena_dbd?: StringFilter<"Survey"> | string
    bukti_gambar?: StringFilter<"Survey"> | string
    catatan?: StringFilter<"Survey"> | string
    createdAt?: DateTimeFilter<"Survey"> | Date | string
    updatedAt?: DateTimeFilter<"Survey"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    healthCenter?: XOR<HealthCenterScalarRelationFilter, HealthCenterWhereInput>
  }

  export type SurveyOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    healthCenterId?: SortOrder
    nama_lengkap_responden?: SortOrder
    kelurahan?: SortOrder
    rt?: SortOrder
    rw?: SortOrder
    jumlah_anggota_keluarga?: SortOrder
    jumlah_penampungan_air?: SortOrder
    jumlah_jentik?: SortOrder
    jenis_penampungan_dirumah?: SortOrder
    jenis_penampungan_diluar?: SortOrder
    kuras_penampungan_air?: SortOrder
    terkena_dbd?: SortOrder
    bukti_gambar?: SortOrder
    catatan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    healthCenter?: HealthCenterOrderByWithRelationInput
    _relevance?: SurveyOrderByRelevanceInput
  }

  export type SurveyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SurveyWhereInput | SurveyWhereInput[]
    OR?: SurveyWhereInput[]
    NOT?: SurveyWhereInput | SurveyWhereInput[]
    userId?: IntFilter<"Survey"> | number
    healthCenterId?: IntFilter<"Survey"> | number
    nama_lengkap_responden?: StringFilter<"Survey"> | string
    kelurahan?: StringFilter<"Survey"> | string
    rt?: StringFilter<"Survey"> | string
    rw?: StringFilter<"Survey"> | string
    jumlah_anggota_keluarga?: IntFilter<"Survey"> | number
    jumlah_penampungan_air?: IntFilter<"Survey"> | number
    jumlah_jentik?: IntFilter<"Survey"> | number
    jenis_penampungan_dirumah?: StringFilter<"Survey"> | string
    jenis_penampungan_diluar?: StringFilter<"Survey"> | string
    kuras_penampungan_air?: StringFilter<"Survey"> | string
    terkena_dbd?: StringFilter<"Survey"> | string
    bukti_gambar?: StringFilter<"Survey"> | string
    catatan?: StringFilter<"Survey"> | string
    createdAt?: DateTimeFilter<"Survey"> | Date | string
    updatedAt?: DateTimeFilter<"Survey"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    healthCenter?: XOR<HealthCenterScalarRelationFilter, HealthCenterWhereInput>
  }, "id">

  export type SurveyOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    healthCenterId?: SortOrder
    nama_lengkap_responden?: SortOrder
    kelurahan?: SortOrder
    rt?: SortOrder
    rw?: SortOrder
    jumlah_anggota_keluarga?: SortOrder
    jumlah_penampungan_air?: SortOrder
    jumlah_jentik?: SortOrder
    jenis_penampungan_dirumah?: SortOrder
    jenis_penampungan_diluar?: SortOrder
    kuras_penampungan_air?: SortOrder
    terkena_dbd?: SortOrder
    bukti_gambar?: SortOrder
    catatan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SurveyCountOrderByAggregateInput
    _avg?: SurveyAvgOrderByAggregateInput
    _max?: SurveyMaxOrderByAggregateInput
    _min?: SurveyMinOrderByAggregateInput
    _sum?: SurveySumOrderByAggregateInput
  }

  export type SurveyScalarWhereWithAggregatesInput = {
    AND?: SurveyScalarWhereWithAggregatesInput | SurveyScalarWhereWithAggregatesInput[]
    OR?: SurveyScalarWhereWithAggregatesInput[]
    NOT?: SurveyScalarWhereWithAggregatesInput | SurveyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Survey"> | number
    userId?: IntWithAggregatesFilter<"Survey"> | number
    healthCenterId?: IntWithAggregatesFilter<"Survey"> | number
    nama_lengkap_responden?: StringWithAggregatesFilter<"Survey"> | string
    kelurahan?: StringWithAggregatesFilter<"Survey"> | string
    rt?: StringWithAggregatesFilter<"Survey"> | string
    rw?: StringWithAggregatesFilter<"Survey"> | string
    jumlah_anggota_keluarga?: IntWithAggregatesFilter<"Survey"> | number
    jumlah_penampungan_air?: IntWithAggregatesFilter<"Survey"> | number
    jumlah_jentik?: IntWithAggregatesFilter<"Survey"> | number
    jenis_penampungan_dirumah?: StringWithAggregatesFilter<"Survey"> | string
    jenis_penampungan_diluar?: StringWithAggregatesFilter<"Survey"> | string
    kuras_penampungan_air?: StringWithAggregatesFilter<"Survey"> | string
    terkena_dbd?: StringWithAggregatesFilter<"Survey"> | string
    bukti_gambar?: StringWithAggregatesFilter<"Survey"> | string
    catatan?: StringWithAggregatesFilter<"Survey"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Survey"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Survey"> | Date | string
  }

  export type UserCreateInput = {
    username: string
    name?: string | null
    email?: string | null
    password: string
    status?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Survey?: SurveyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    name?: string | null
    email?: string | null
    password: string
    status?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    Survey?: SurveyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Survey?: SurveyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Survey?: SurveyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    name?: string | null
    email?: string | null
    password: string
    status?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlacklistedTokenCreateInput = {
    token: string
    expiredAt: Date | string
    createdAt?: Date | string
  }

  export type BlacklistedTokenUncheckedCreateInput = {
    id?: number
    token: string
    expiredAt: Date | string
    createdAt?: Date | string
  }

  export type BlacklistedTokenUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlacklistedTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlacklistedTokenCreateManyInput = {
    id?: number
    token: string
    expiredAt: Date | string
    createdAt?: Date | string
  }

  export type BlacklistedTokenUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlacklistedTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthCenterCreateInput = {
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Survey?: SurveyCreateNestedManyWithoutHealthCenterInput
  }

  export type HealthCenterUncheckedCreateInput = {
    id?: number
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Survey?: SurveyUncheckedCreateNestedManyWithoutHealthCenterInput
  }

  export type HealthCenterUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Survey?: SurveyUpdateManyWithoutHealthCenterNestedInput
  }

  export type HealthCenterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Survey?: SurveyUncheckedUpdateManyWithoutHealthCenterNestedInput
  }

  export type HealthCenterCreateManyInput = {
    id?: number
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HealthCenterUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthCenterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationCreateInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EducationImageCreateNestedManyWithoutEducationInput
  }

  export type EducationUncheckedCreateInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: EducationImageUncheckedCreateNestedManyWithoutEducationInput
  }

  export type EducationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EducationImageUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: EducationImageUncheckedUpdateManyWithoutEducationNestedInput
  }

  export type EducationCreateManyInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EducationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateInput = {
    imagePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    educations?: EducationImageCreateNestedManyWithoutImageInput
    MosquitoImage?: MosquitoImageCreateNestedManyWithoutImageInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    imagePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    educations?: EducationImageUncheckedCreateNestedManyWithoutImageInput
    MosquitoImage?: MosquitoImageUncheckedCreateNestedManyWithoutImageInput
  }

  export type ImageUpdateInput = {
    imagePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    educations?: EducationImageUpdateManyWithoutImageNestedInput
    MosquitoImage?: MosquitoImageUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    imagePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    educations?: EducationImageUncheckedUpdateManyWithoutImageNestedInput
    MosquitoImage?: MosquitoImageUncheckedUpdateManyWithoutImageNestedInput
  }

  export type ImageCreateManyInput = {
    id?: number
    imagePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageUpdateManyMutationInput = {
    imagePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    imagePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationImageCreateInput = {
    education: EducationCreateNestedOneWithoutImagesInput
    image: ImageCreateNestedOneWithoutEducationsInput
  }

  export type EducationImageUncheckedCreateInput = {
    id?: number
    educationId: number
    imageId: number
  }

  export type EducationImageUpdateInput = {
    education?: EducationUpdateOneRequiredWithoutImagesNestedInput
    image?: ImageUpdateOneRequiredWithoutEducationsNestedInput
  }

  export type EducationImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type EducationImageCreateManyInput = {
    id?: number
    educationId: number
    imageId: number
  }

  export type EducationImageUpdateManyMutationInput = {

  }

  export type EducationImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type VideoCreateInput = {
    title: string
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoUncheckedCreateInput = {
    id?: number
    title: string
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoCreateManyInput = {
    id?: number
    title: string
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MosquitoImageCreateInput = {
    mosquito: MosquitoCreateNestedOneWithoutImagesInput
    image: ImageCreateNestedOneWithoutMosquitoImageInput
  }

  export type MosquitoImageUncheckedCreateInput = {
    id?: number
    mosquitoId: number
    imageId: number
  }

  export type MosquitoImageUpdateInput = {
    mosquito?: MosquitoUpdateOneRequiredWithoutImagesNestedInput
    image?: ImageUpdateOneRequiredWithoutMosquitoImageNestedInput
  }

  export type MosquitoImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mosquitoId?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type MosquitoImageCreateManyInput = {
    id?: number
    mosquitoId: number
    imageId: number
  }

  export type MosquitoImageUpdateManyMutationInput = {

  }

  export type MosquitoImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mosquitoId?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type MosquitoCreateInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: MosquitoImageCreateNestedManyWithoutMosquitoInput
  }

  export type MosquitoUncheckedCreateInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: MosquitoImageUncheckedCreateNestedManyWithoutMosquitoInput
  }

  export type MosquitoUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: MosquitoImageUpdateManyWithoutMosquitoNestedInput
  }

  export type MosquitoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: MosquitoImageUncheckedUpdateManyWithoutMosquitoNestedInput
  }

  export type MosquitoCreateManyInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MosquitoUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MosquitoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyCreateInput = {
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSurveyInput
    healthCenter: HealthCenterCreateNestedOneWithoutSurveyInput
  }

  export type SurveyUncheckedCreateInput = {
    id?: number
    userId: number
    healthCenterId: number
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SurveyUpdateInput = {
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSurveyNestedInput
    healthCenter?: HealthCenterUpdateOneRequiredWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    healthCenterId?: IntFieldUpdateOperationsInput | number
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyCreateManyInput = {
    id?: number
    userId: number
    healthCenterId: number
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SurveyUpdateManyMutationInput = {
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    healthCenterId?: IntFieldUpdateOperationsInput | number
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SurveyListRelationFilter = {
    every?: SurveyWhereInput
    some?: SurveyWhereInput
    none?: SurveyWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SurveyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    status?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BlacklistedTokenOrderByRelevanceInput = {
    fields: BlacklistedTokenOrderByRelevanceFieldEnum | BlacklistedTokenOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BlacklistedTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BlacklistedTokenAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BlacklistedTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BlacklistedTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BlacklistedTokenSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HealthCenterOrderByRelevanceInput = {
    fields: HealthCenterOrderByRelevanceFieldEnum | HealthCenterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type HealthCenterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HealthCenterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HealthCenterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HealthCenterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HealthCenterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EducationImageListRelationFilter = {
    every?: EducationImageWhereInput
    some?: EducationImageWhereInput
    none?: EducationImageWhereInput
  }

  export type EducationImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EducationOrderByRelevanceInput = {
    fields: EducationOrderByRelevanceFieldEnum | EducationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EducationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EducationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EducationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MosquitoImageListRelationFilter = {
    every?: MosquitoImageWhereInput
    some?: MosquitoImageWhereInput
    none?: MosquitoImageWhereInput
  }

  export type MosquitoImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImageOrderByRelevanceInput = {
    fields: ImageOrderByRelevanceFieldEnum | ImageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    imagePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    imagePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    imagePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EducationScalarRelationFilter = {
    is?: EducationWhereInput
    isNot?: EducationWhereInput
  }

  export type ImageScalarRelationFilter = {
    is?: ImageWhereInput
    isNot?: ImageWhereInput
  }

  export type EducationImageCountOrderByAggregateInput = {
    id?: SortOrder
    educationId?: SortOrder
    imageId?: SortOrder
  }

  export type EducationImageAvgOrderByAggregateInput = {
    id?: SortOrder
    educationId?: SortOrder
    imageId?: SortOrder
  }

  export type EducationImageMaxOrderByAggregateInput = {
    id?: SortOrder
    educationId?: SortOrder
    imageId?: SortOrder
  }

  export type EducationImageMinOrderByAggregateInput = {
    id?: SortOrder
    educationId?: SortOrder
    imageId?: SortOrder
  }

  export type EducationImageSumOrderByAggregateInput = {
    id?: SortOrder
    educationId?: SortOrder
    imageId?: SortOrder
  }

  export type VideoOrderByRelevanceInput = {
    fields: VideoOrderByRelevanceFieldEnum | VideoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type VideoCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VideoMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MosquitoScalarRelationFilter = {
    is?: MosquitoWhereInput
    isNot?: MosquitoWhereInput
  }

  export type MosquitoImageCountOrderByAggregateInput = {
    id?: SortOrder
    mosquitoId?: SortOrder
    imageId?: SortOrder
  }

  export type MosquitoImageAvgOrderByAggregateInput = {
    id?: SortOrder
    mosquitoId?: SortOrder
    imageId?: SortOrder
  }

  export type MosquitoImageMaxOrderByAggregateInput = {
    id?: SortOrder
    mosquitoId?: SortOrder
    imageId?: SortOrder
  }

  export type MosquitoImageMinOrderByAggregateInput = {
    id?: SortOrder
    mosquitoId?: SortOrder
    imageId?: SortOrder
  }

  export type MosquitoImageSumOrderByAggregateInput = {
    id?: SortOrder
    mosquitoId?: SortOrder
    imageId?: SortOrder
  }

  export type MosquitoOrderByRelevanceInput = {
    fields: MosquitoOrderByRelevanceFieldEnum | MosquitoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MosquitoCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MosquitoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MosquitoMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MosquitoMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MosquitoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HealthCenterScalarRelationFilter = {
    is?: HealthCenterWhereInput
    isNot?: HealthCenterWhereInput
  }

  export type SurveyOrderByRelevanceInput = {
    fields: SurveyOrderByRelevanceFieldEnum | SurveyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SurveyCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    healthCenterId?: SortOrder
    nama_lengkap_responden?: SortOrder
    kelurahan?: SortOrder
    rt?: SortOrder
    rw?: SortOrder
    jumlah_anggota_keluarga?: SortOrder
    jumlah_penampungan_air?: SortOrder
    jumlah_jentik?: SortOrder
    jenis_penampungan_dirumah?: SortOrder
    jenis_penampungan_diluar?: SortOrder
    kuras_penampungan_air?: SortOrder
    terkena_dbd?: SortOrder
    bukti_gambar?: SortOrder
    catatan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SurveyAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    healthCenterId?: SortOrder
    jumlah_anggota_keluarga?: SortOrder
    jumlah_penampungan_air?: SortOrder
    jumlah_jentik?: SortOrder
  }

  export type SurveyMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    healthCenterId?: SortOrder
    nama_lengkap_responden?: SortOrder
    kelurahan?: SortOrder
    rt?: SortOrder
    rw?: SortOrder
    jumlah_anggota_keluarga?: SortOrder
    jumlah_penampungan_air?: SortOrder
    jumlah_jentik?: SortOrder
    jenis_penampungan_dirumah?: SortOrder
    jenis_penampungan_diluar?: SortOrder
    kuras_penampungan_air?: SortOrder
    terkena_dbd?: SortOrder
    bukti_gambar?: SortOrder
    catatan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SurveyMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    healthCenterId?: SortOrder
    nama_lengkap_responden?: SortOrder
    kelurahan?: SortOrder
    rt?: SortOrder
    rw?: SortOrder
    jumlah_anggota_keluarga?: SortOrder
    jumlah_penampungan_air?: SortOrder
    jumlah_jentik?: SortOrder
    jenis_penampungan_dirumah?: SortOrder
    jenis_penampungan_diluar?: SortOrder
    kuras_penampungan_air?: SortOrder
    terkena_dbd?: SortOrder
    bukti_gambar?: SortOrder
    catatan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SurveySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    healthCenterId?: SortOrder
    jumlah_anggota_keluarga?: SortOrder
    jumlah_penampungan_air?: SortOrder
    jumlah_jentik?: SortOrder
  }

  export type SurveyCreateNestedManyWithoutUserInput = {
    create?: XOR<SurveyCreateWithoutUserInput, SurveyUncheckedCreateWithoutUserInput> | SurveyCreateWithoutUserInput[] | SurveyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutUserInput | SurveyCreateOrConnectWithoutUserInput[]
    createMany?: SurveyCreateManyUserInputEnvelope
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
  }

  export type SurveyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SurveyCreateWithoutUserInput, SurveyUncheckedCreateWithoutUserInput> | SurveyCreateWithoutUserInput[] | SurveyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutUserInput | SurveyCreateOrConnectWithoutUserInput[]
    createMany?: SurveyCreateManyUserInputEnvelope
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SurveyUpdateManyWithoutUserNestedInput = {
    create?: XOR<SurveyCreateWithoutUserInput, SurveyUncheckedCreateWithoutUserInput> | SurveyCreateWithoutUserInput[] | SurveyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutUserInput | SurveyCreateOrConnectWithoutUserInput[]
    upsert?: SurveyUpsertWithWhereUniqueWithoutUserInput | SurveyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SurveyCreateManyUserInputEnvelope
    set?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    disconnect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    delete?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    update?: SurveyUpdateWithWhereUniqueWithoutUserInput | SurveyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SurveyUpdateManyWithWhereWithoutUserInput | SurveyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SurveyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SurveyCreateWithoutUserInput, SurveyUncheckedCreateWithoutUserInput> | SurveyCreateWithoutUserInput[] | SurveyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutUserInput | SurveyCreateOrConnectWithoutUserInput[]
    upsert?: SurveyUpsertWithWhereUniqueWithoutUserInput | SurveyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SurveyCreateManyUserInputEnvelope
    set?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    disconnect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    delete?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    update?: SurveyUpdateWithWhereUniqueWithoutUserInput | SurveyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SurveyUpdateManyWithWhereWithoutUserInput | SurveyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
  }

  export type SurveyCreateNestedManyWithoutHealthCenterInput = {
    create?: XOR<SurveyCreateWithoutHealthCenterInput, SurveyUncheckedCreateWithoutHealthCenterInput> | SurveyCreateWithoutHealthCenterInput[] | SurveyUncheckedCreateWithoutHealthCenterInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutHealthCenterInput | SurveyCreateOrConnectWithoutHealthCenterInput[]
    createMany?: SurveyCreateManyHealthCenterInputEnvelope
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
  }

  export type SurveyUncheckedCreateNestedManyWithoutHealthCenterInput = {
    create?: XOR<SurveyCreateWithoutHealthCenterInput, SurveyUncheckedCreateWithoutHealthCenterInput> | SurveyCreateWithoutHealthCenterInput[] | SurveyUncheckedCreateWithoutHealthCenterInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutHealthCenterInput | SurveyCreateOrConnectWithoutHealthCenterInput[]
    createMany?: SurveyCreateManyHealthCenterInputEnvelope
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
  }

  export type SurveyUpdateManyWithoutHealthCenterNestedInput = {
    create?: XOR<SurveyCreateWithoutHealthCenterInput, SurveyUncheckedCreateWithoutHealthCenterInput> | SurveyCreateWithoutHealthCenterInput[] | SurveyUncheckedCreateWithoutHealthCenterInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutHealthCenterInput | SurveyCreateOrConnectWithoutHealthCenterInput[]
    upsert?: SurveyUpsertWithWhereUniqueWithoutHealthCenterInput | SurveyUpsertWithWhereUniqueWithoutHealthCenterInput[]
    createMany?: SurveyCreateManyHealthCenterInputEnvelope
    set?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    disconnect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    delete?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    update?: SurveyUpdateWithWhereUniqueWithoutHealthCenterInput | SurveyUpdateWithWhereUniqueWithoutHealthCenterInput[]
    updateMany?: SurveyUpdateManyWithWhereWithoutHealthCenterInput | SurveyUpdateManyWithWhereWithoutHealthCenterInput[]
    deleteMany?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
  }

  export type SurveyUncheckedUpdateManyWithoutHealthCenterNestedInput = {
    create?: XOR<SurveyCreateWithoutHealthCenterInput, SurveyUncheckedCreateWithoutHealthCenterInput> | SurveyCreateWithoutHealthCenterInput[] | SurveyUncheckedCreateWithoutHealthCenterInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutHealthCenterInput | SurveyCreateOrConnectWithoutHealthCenterInput[]
    upsert?: SurveyUpsertWithWhereUniqueWithoutHealthCenterInput | SurveyUpsertWithWhereUniqueWithoutHealthCenterInput[]
    createMany?: SurveyCreateManyHealthCenterInputEnvelope
    set?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    disconnect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    delete?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    update?: SurveyUpdateWithWhereUniqueWithoutHealthCenterInput | SurveyUpdateWithWhereUniqueWithoutHealthCenterInput[]
    updateMany?: SurveyUpdateManyWithWhereWithoutHealthCenterInput | SurveyUpdateManyWithWhereWithoutHealthCenterInput[]
    deleteMany?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
  }

  export type EducationImageCreateNestedManyWithoutEducationInput = {
    create?: XOR<EducationImageCreateWithoutEducationInput, EducationImageUncheckedCreateWithoutEducationInput> | EducationImageCreateWithoutEducationInput[] | EducationImageUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: EducationImageCreateOrConnectWithoutEducationInput | EducationImageCreateOrConnectWithoutEducationInput[]
    createMany?: EducationImageCreateManyEducationInputEnvelope
    connect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
  }

  export type EducationImageUncheckedCreateNestedManyWithoutEducationInput = {
    create?: XOR<EducationImageCreateWithoutEducationInput, EducationImageUncheckedCreateWithoutEducationInput> | EducationImageCreateWithoutEducationInput[] | EducationImageUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: EducationImageCreateOrConnectWithoutEducationInput | EducationImageCreateOrConnectWithoutEducationInput[]
    createMany?: EducationImageCreateManyEducationInputEnvelope
    connect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
  }

  export type EducationImageUpdateManyWithoutEducationNestedInput = {
    create?: XOR<EducationImageCreateWithoutEducationInput, EducationImageUncheckedCreateWithoutEducationInput> | EducationImageCreateWithoutEducationInput[] | EducationImageUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: EducationImageCreateOrConnectWithoutEducationInput | EducationImageCreateOrConnectWithoutEducationInput[]
    upsert?: EducationImageUpsertWithWhereUniqueWithoutEducationInput | EducationImageUpsertWithWhereUniqueWithoutEducationInput[]
    createMany?: EducationImageCreateManyEducationInputEnvelope
    set?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    disconnect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    delete?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    connect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    update?: EducationImageUpdateWithWhereUniqueWithoutEducationInput | EducationImageUpdateWithWhereUniqueWithoutEducationInput[]
    updateMany?: EducationImageUpdateManyWithWhereWithoutEducationInput | EducationImageUpdateManyWithWhereWithoutEducationInput[]
    deleteMany?: EducationImageScalarWhereInput | EducationImageScalarWhereInput[]
  }

  export type EducationImageUncheckedUpdateManyWithoutEducationNestedInput = {
    create?: XOR<EducationImageCreateWithoutEducationInput, EducationImageUncheckedCreateWithoutEducationInput> | EducationImageCreateWithoutEducationInput[] | EducationImageUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: EducationImageCreateOrConnectWithoutEducationInput | EducationImageCreateOrConnectWithoutEducationInput[]
    upsert?: EducationImageUpsertWithWhereUniqueWithoutEducationInput | EducationImageUpsertWithWhereUniqueWithoutEducationInput[]
    createMany?: EducationImageCreateManyEducationInputEnvelope
    set?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    disconnect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    delete?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    connect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    update?: EducationImageUpdateWithWhereUniqueWithoutEducationInput | EducationImageUpdateWithWhereUniqueWithoutEducationInput[]
    updateMany?: EducationImageUpdateManyWithWhereWithoutEducationInput | EducationImageUpdateManyWithWhereWithoutEducationInput[]
    deleteMany?: EducationImageScalarWhereInput | EducationImageScalarWhereInput[]
  }

  export type EducationImageCreateNestedManyWithoutImageInput = {
    create?: XOR<EducationImageCreateWithoutImageInput, EducationImageUncheckedCreateWithoutImageInput> | EducationImageCreateWithoutImageInput[] | EducationImageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: EducationImageCreateOrConnectWithoutImageInput | EducationImageCreateOrConnectWithoutImageInput[]
    createMany?: EducationImageCreateManyImageInputEnvelope
    connect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
  }

  export type MosquitoImageCreateNestedManyWithoutImageInput = {
    create?: XOR<MosquitoImageCreateWithoutImageInput, MosquitoImageUncheckedCreateWithoutImageInput> | MosquitoImageCreateWithoutImageInput[] | MosquitoImageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: MosquitoImageCreateOrConnectWithoutImageInput | MosquitoImageCreateOrConnectWithoutImageInput[]
    createMany?: MosquitoImageCreateManyImageInputEnvelope
    connect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
  }

  export type EducationImageUncheckedCreateNestedManyWithoutImageInput = {
    create?: XOR<EducationImageCreateWithoutImageInput, EducationImageUncheckedCreateWithoutImageInput> | EducationImageCreateWithoutImageInput[] | EducationImageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: EducationImageCreateOrConnectWithoutImageInput | EducationImageCreateOrConnectWithoutImageInput[]
    createMany?: EducationImageCreateManyImageInputEnvelope
    connect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
  }

  export type MosquitoImageUncheckedCreateNestedManyWithoutImageInput = {
    create?: XOR<MosquitoImageCreateWithoutImageInput, MosquitoImageUncheckedCreateWithoutImageInput> | MosquitoImageCreateWithoutImageInput[] | MosquitoImageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: MosquitoImageCreateOrConnectWithoutImageInput | MosquitoImageCreateOrConnectWithoutImageInput[]
    createMany?: MosquitoImageCreateManyImageInputEnvelope
    connect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
  }

  export type EducationImageUpdateManyWithoutImageNestedInput = {
    create?: XOR<EducationImageCreateWithoutImageInput, EducationImageUncheckedCreateWithoutImageInput> | EducationImageCreateWithoutImageInput[] | EducationImageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: EducationImageCreateOrConnectWithoutImageInput | EducationImageCreateOrConnectWithoutImageInput[]
    upsert?: EducationImageUpsertWithWhereUniqueWithoutImageInput | EducationImageUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: EducationImageCreateManyImageInputEnvelope
    set?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    disconnect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    delete?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    connect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    update?: EducationImageUpdateWithWhereUniqueWithoutImageInput | EducationImageUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: EducationImageUpdateManyWithWhereWithoutImageInput | EducationImageUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: EducationImageScalarWhereInput | EducationImageScalarWhereInput[]
  }

  export type MosquitoImageUpdateManyWithoutImageNestedInput = {
    create?: XOR<MosquitoImageCreateWithoutImageInput, MosquitoImageUncheckedCreateWithoutImageInput> | MosquitoImageCreateWithoutImageInput[] | MosquitoImageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: MosquitoImageCreateOrConnectWithoutImageInput | MosquitoImageCreateOrConnectWithoutImageInput[]
    upsert?: MosquitoImageUpsertWithWhereUniqueWithoutImageInput | MosquitoImageUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: MosquitoImageCreateManyImageInputEnvelope
    set?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    disconnect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    delete?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    connect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    update?: MosquitoImageUpdateWithWhereUniqueWithoutImageInput | MosquitoImageUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: MosquitoImageUpdateManyWithWhereWithoutImageInput | MosquitoImageUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: MosquitoImageScalarWhereInput | MosquitoImageScalarWhereInput[]
  }

  export type EducationImageUncheckedUpdateManyWithoutImageNestedInput = {
    create?: XOR<EducationImageCreateWithoutImageInput, EducationImageUncheckedCreateWithoutImageInput> | EducationImageCreateWithoutImageInput[] | EducationImageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: EducationImageCreateOrConnectWithoutImageInput | EducationImageCreateOrConnectWithoutImageInput[]
    upsert?: EducationImageUpsertWithWhereUniqueWithoutImageInput | EducationImageUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: EducationImageCreateManyImageInputEnvelope
    set?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    disconnect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    delete?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    connect?: EducationImageWhereUniqueInput | EducationImageWhereUniqueInput[]
    update?: EducationImageUpdateWithWhereUniqueWithoutImageInput | EducationImageUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: EducationImageUpdateManyWithWhereWithoutImageInput | EducationImageUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: EducationImageScalarWhereInput | EducationImageScalarWhereInput[]
  }

  export type MosquitoImageUncheckedUpdateManyWithoutImageNestedInput = {
    create?: XOR<MosquitoImageCreateWithoutImageInput, MosquitoImageUncheckedCreateWithoutImageInput> | MosquitoImageCreateWithoutImageInput[] | MosquitoImageUncheckedCreateWithoutImageInput[]
    connectOrCreate?: MosquitoImageCreateOrConnectWithoutImageInput | MosquitoImageCreateOrConnectWithoutImageInput[]
    upsert?: MosquitoImageUpsertWithWhereUniqueWithoutImageInput | MosquitoImageUpsertWithWhereUniqueWithoutImageInput[]
    createMany?: MosquitoImageCreateManyImageInputEnvelope
    set?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    disconnect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    delete?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    connect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    update?: MosquitoImageUpdateWithWhereUniqueWithoutImageInput | MosquitoImageUpdateWithWhereUniqueWithoutImageInput[]
    updateMany?: MosquitoImageUpdateManyWithWhereWithoutImageInput | MosquitoImageUpdateManyWithWhereWithoutImageInput[]
    deleteMany?: MosquitoImageScalarWhereInput | MosquitoImageScalarWhereInput[]
  }

  export type EducationCreateNestedOneWithoutImagesInput = {
    create?: XOR<EducationCreateWithoutImagesInput, EducationUncheckedCreateWithoutImagesInput>
    connectOrCreate?: EducationCreateOrConnectWithoutImagesInput
    connect?: EducationWhereUniqueInput
  }

  export type ImageCreateNestedOneWithoutEducationsInput = {
    create?: XOR<ImageCreateWithoutEducationsInput, ImageUncheckedCreateWithoutEducationsInput>
    connectOrCreate?: ImageCreateOrConnectWithoutEducationsInput
    connect?: ImageWhereUniqueInput
  }

  export type EducationUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<EducationCreateWithoutImagesInput, EducationUncheckedCreateWithoutImagesInput>
    connectOrCreate?: EducationCreateOrConnectWithoutImagesInput
    upsert?: EducationUpsertWithoutImagesInput
    connect?: EducationWhereUniqueInput
    update?: XOR<XOR<EducationUpdateToOneWithWhereWithoutImagesInput, EducationUpdateWithoutImagesInput>, EducationUncheckedUpdateWithoutImagesInput>
  }

  export type ImageUpdateOneRequiredWithoutEducationsNestedInput = {
    create?: XOR<ImageCreateWithoutEducationsInput, ImageUncheckedCreateWithoutEducationsInput>
    connectOrCreate?: ImageCreateOrConnectWithoutEducationsInput
    upsert?: ImageUpsertWithoutEducationsInput
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutEducationsInput, ImageUpdateWithoutEducationsInput>, ImageUncheckedUpdateWithoutEducationsInput>
  }

  export type MosquitoCreateNestedOneWithoutImagesInput = {
    create?: XOR<MosquitoCreateWithoutImagesInput, MosquitoUncheckedCreateWithoutImagesInput>
    connectOrCreate?: MosquitoCreateOrConnectWithoutImagesInput
    connect?: MosquitoWhereUniqueInput
  }

  export type ImageCreateNestedOneWithoutMosquitoImageInput = {
    create?: XOR<ImageCreateWithoutMosquitoImageInput, ImageUncheckedCreateWithoutMosquitoImageInput>
    connectOrCreate?: ImageCreateOrConnectWithoutMosquitoImageInput
    connect?: ImageWhereUniqueInput
  }

  export type MosquitoUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<MosquitoCreateWithoutImagesInput, MosquitoUncheckedCreateWithoutImagesInput>
    connectOrCreate?: MosquitoCreateOrConnectWithoutImagesInput
    upsert?: MosquitoUpsertWithoutImagesInput
    connect?: MosquitoWhereUniqueInput
    update?: XOR<XOR<MosquitoUpdateToOneWithWhereWithoutImagesInput, MosquitoUpdateWithoutImagesInput>, MosquitoUncheckedUpdateWithoutImagesInput>
  }

  export type ImageUpdateOneRequiredWithoutMosquitoImageNestedInput = {
    create?: XOR<ImageCreateWithoutMosquitoImageInput, ImageUncheckedCreateWithoutMosquitoImageInput>
    connectOrCreate?: ImageCreateOrConnectWithoutMosquitoImageInput
    upsert?: ImageUpsertWithoutMosquitoImageInput
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutMosquitoImageInput, ImageUpdateWithoutMosquitoImageInput>, ImageUncheckedUpdateWithoutMosquitoImageInput>
  }

  export type MosquitoImageCreateNestedManyWithoutMosquitoInput = {
    create?: XOR<MosquitoImageCreateWithoutMosquitoInput, MosquitoImageUncheckedCreateWithoutMosquitoInput> | MosquitoImageCreateWithoutMosquitoInput[] | MosquitoImageUncheckedCreateWithoutMosquitoInput[]
    connectOrCreate?: MosquitoImageCreateOrConnectWithoutMosquitoInput | MosquitoImageCreateOrConnectWithoutMosquitoInput[]
    createMany?: MosquitoImageCreateManyMosquitoInputEnvelope
    connect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
  }

  export type MosquitoImageUncheckedCreateNestedManyWithoutMosquitoInput = {
    create?: XOR<MosquitoImageCreateWithoutMosquitoInput, MosquitoImageUncheckedCreateWithoutMosquitoInput> | MosquitoImageCreateWithoutMosquitoInput[] | MosquitoImageUncheckedCreateWithoutMosquitoInput[]
    connectOrCreate?: MosquitoImageCreateOrConnectWithoutMosquitoInput | MosquitoImageCreateOrConnectWithoutMosquitoInput[]
    createMany?: MosquitoImageCreateManyMosquitoInputEnvelope
    connect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
  }

  export type MosquitoImageUpdateManyWithoutMosquitoNestedInput = {
    create?: XOR<MosquitoImageCreateWithoutMosquitoInput, MosquitoImageUncheckedCreateWithoutMosquitoInput> | MosquitoImageCreateWithoutMosquitoInput[] | MosquitoImageUncheckedCreateWithoutMosquitoInput[]
    connectOrCreate?: MosquitoImageCreateOrConnectWithoutMosquitoInput | MosquitoImageCreateOrConnectWithoutMosquitoInput[]
    upsert?: MosquitoImageUpsertWithWhereUniqueWithoutMosquitoInput | MosquitoImageUpsertWithWhereUniqueWithoutMosquitoInput[]
    createMany?: MosquitoImageCreateManyMosquitoInputEnvelope
    set?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    disconnect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    delete?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    connect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    update?: MosquitoImageUpdateWithWhereUniqueWithoutMosquitoInput | MosquitoImageUpdateWithWhereUniqueWithoutMosquitoInput[]
    updateMany?: MosquitoImageUpdateManyWithWhereWithoutMosquitoInput | MosquitoImageUpdateManyWithWhereWithoutMosquitoInput[]
    deleteMany?: MosquitoImageScalarWhereInput | MosquitoImageScalarWhereInput[]
  }

  export type MosquitoImageUncheckedUpdateManyWithoutMosquitoNestedInput = {
    create?: XOR<MosquitoImageCreateWithoutMosquitoInput, MosquitoImageUncheckedCreateWithoutMosquitoInput> | MosquitoImageCreateWithoutMosquitoInput[] | MosquitoImageUncheckedCreateWithoutMosquitoInput[]
    connectOrCreate?: MosquitoImageCreateOrConnectWithoutMosquitoInput | MosquitoImageCreateOrConnectWithoutMosquitoInput[]
    upsert?: MosquitoImageUpsertWithWhereUniqueWithoutMosquitoInput | MosquitoImageUpsertWithWhereUniqueWithoutMosquitoInput[]
    createMany?: MosquitoImageCreateManyMosquitoInputEnvelope
    set?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    disconnect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    delete?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    connect?: MosquitoImageWhereUniqueInput | MosquitoImageWhereUniqueInput[]
    update?: MosquitoImageUpdateWithWhereUniqueWithoutMosquitoInput | MosquitoImageUpdateWithWhereUniqueWithoutMosquitoInput[]
    updateMany?: MosquitoImageUpdateManyWithWhereWithoutMosquitoInput | MosquitoImageUpdateManyWithWhereWithoutMosquitoInput[]
    deleteMany?: MosquitoImageScalarWhereInput | MosquitoImageScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSurveyInput = {
    create?: XOR<UserCreateWithoutSurveyInput, UserUncheckedCreateWithoutSurveyInput>
    connectOrCreate?: UserCreateOrConnectWithoutSurveyInput
    connect?: UserWhereUniqueInput
  }

  export type HealthCenterCreateNestedOneWithoutSurveyInput = {
    create?: XOR<HealthCenterCreateWithoutSurveyInput, HealthCenterUncheckedCreateWithoutSurveyInput>
    connectOrCreate?: HealthCenterCreateOrConnectWithoutSurveyInput
    connect?: HealthCenterWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSurveyNestedInput = {
    create?: XOR<UserCreateWithoutSurveyInput, UserUncheckedCreateWithoutSurveyInput>
    connectOrCreate?: UserCreateOrConnectWithoutSurveyInput
    upsert?: UserUpsertWithoutSurveyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSurveyInput, UserUpdateWithoutSurveyInput>, UserUncheckedUpdateWithoutSurveyInput>
  }

  export type HealthCenterUpdateOneRequiredWithoutSurveyNestedInput = {
    create?: XOR<HealthCenterCreateWithoutSurveyInput, HealthCenterUncheckedCreateWithoutSurveyInput>
    connectOrCreate?: HealthCenterCreateOrConnectWithoutSurveyInput
    upsert?: HealthCenterUpsertWithoutSurveyInput
    connect?: HealthCenterWhereUniqueInput
    update?: XOR<XOR<HealthCenterUpdateToOneWithWhereWithoutSurveyInput, HealthCenterUpdateWithoutSurveyInput>, HealthCenterUncheckedUpdateWithoutSurveyInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SurveyCreateWithoutUserInput = {
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt?: Date | string
    updatedAt?: Date | string
    healthCenter: HealthCenterCreateNestedOneWithoutSurveyInput
  }

  export type SurveyUncheckedCreateWithoutUserInput = {
    id?: number
    healthCenterId: number
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SurveyCreateOrConnectWithoutUserInput = {
    where: SurveyWhereUniqueInput
    create: XOR<SurveyCreateWithoutUserInput, SurveyUncheckedCreateWithoutUserInput>
  }

  export type SurveyCreateManyUserInputEnvelope = {
    data: SurveyCreateManyUserInput | SurveyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SurveyUpsertWithWhereUniqueWithoutUserInput = {
    where: SurveyWhereUniqueInput
    update: XOR<SurveyUpdateWithoutUserInput, SurveyUncheckedUpdateWithoutUserInput>
    create: XOR<SurveyCreateWithoutUserInput, SurveyUncheckedCreateWithoutUserInput>
  }

  export type SurveyUpdateWithWhereUniqueWithoutUserInput = {
    where: SurveyWhereUniqueInput
    data: XOR<SurveyUpdateWithoutUserInput, SurveyUncheckedUpdateWithoutUserInput>
  }

  export type SurveyUpdateManyWithWhereWithoutUserInput = {
    where: SurveyScalarWhereInput
    data: XOR<SurveyUpdateManyMutationInput, SurveyUncheckedUpdateManyWithoutUserInput>
  }

  export type SurveyScalarWhereInput = {
    AND?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
    OR?: SurveyScalarWhereInput[]
    NOT?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
    id?: IntFilter<"Survey"> | number
    userId?: IntFilter<"Survey"> | number
    healthCenterId?: IntFilter<"Survey"> | number
    nama_lengkap_responden?: StringFilter<"Survey"> | string
    kelurahan?: StringFilter<"Survey"> | string
    rt?: StringFilter<"Survey"> | string
    rw?: StringFilter<"Survey"> | string
    jumlah_anggota_keluarga?: IntFilter<"Survey"> | number
    jumlah_penampungan_air?: IntFilter<"Survey"> | number
    jumlah_jentik?: IntFilter<"Survey"> | number
    jenis_penampungan_dirumah?: StringFilter<"Survey"> | string
    jenis_penampungan_diluar?: StringFilter<"Survey"> | string
    kuras_penampungan_air?: StringFilter<"Survey"> | string
    terkena_dbd?: StringFilter<"Survey"> | string
    bukti_gambar?: StringFilter<"Survey"> | string
    catatan?: StringFilter<"Survey"> | string
    createdAt?: DateTimeFilter<"Survey"> | Date | string
    updatedAt?: DateTimeFilter<"Survey"> | Date | string
  }

  export type SurveyCreateWithoutHealthCenterInput = {
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSurveyInput
  }

  export type SurveyUncheckedCreateWithoutHealthCenterInput = {
    id?: number
    userId: number
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SurveyCreateOrConnectWithoutHealthCenterInput = {
    where: SurveyWhereUniqueInput
    create: XOR<SurveyCreateWithoutHealthCenterInput, SurveyUncheckedCreateWithoutHealthCenterInput>
  }

  export type SurveyCreateManyHealthCenterInputEnvelope = {
    data: SurveyCreateManyHealthCenterInput | SurveyCreateManyHealthCenterInput[]
    skipDuplicates?: boolean
  }

  export type SurveyUpsertWithWhereUniqueWithoutHealthCenterInput = {
    where: SurveyWhereUniqueInput
    update: XOR<SurveyUpdateWithoutHealthCenterInput, SurveyUncheckedUpdateWithoutHealthCenterInput>
    create: XOR<SurveyCreateWithoutHealthCenterInput, SurveyUncheckedCreateWithoutHealthCenterInput>
  }

  export type SurveyUpdateWithWhereUniqueWithoutHealthCenterInput = {
    where: SurveyWhereUniqueInput
    data: XOR<SurveyUpdateWithoutHealthCenterInput, SurveyUncheckedUpdateWithoutHealthCenterInput>
  }

  export type SurveyUpdateManyWithWhereWithoutHealthCenterInput = {
    where: SurveyScalarWhereInput
    data: XOR<SurveyUpdateManyMutationInput, SurveyUncheckedUpdateManyWithoutHealthCenterInput>
  }

  export type EducationImageCreateWithoutEducationInput = {
    image: ImageCreateNestedOneWithoutEducationsInput
  }

  export type EducationImageUncheckedCreateWithoutEducationInput = {
    id?: number
    imageId: number
  }

  export type EducationImageCreateOrConnectWithoutEducationInput = {
    where: EducationImageWhereUniqueInput
    create: XOR<EducationImageCreateWithoutEducationInput, EducationImageUncheckedCreateWithoutEducationInput>
  }

  export type EducationImageCreateManyEducationInputEnvelope = {
    data: EducationImageCreateManyEducationInput | EducationImageCreateManyEducationInput[]
    skipDuplicates?: boolean
  }

  export type EducationImageUpsertWithWhereUniqueWithoutEducationInput = {
    where: EducationImageWhereUniqueInput
    update: XOR<EducationImageUpdateWithoutEducationInput, EducationImageUncheckedUpdateWithoutEducationInput>
    create: XOR<EducationImageCreateWithoutEducationInput, EducationImageUncheckedCreateWithoutEducationInput>
  }

  export type EducationImageUpdateWithWhereUniqueWithoutEducationInput = {
    where: EducationImageWhereUniqueInput
    data: XOR<EducationImageUpdateWithoutEducationInput, EducationImageUncheckedUpdateWithoutEducationInput>
  }

  export type EducationImageUpdateManyWithWhereWithoutEducationInput = {
    where: EducationImageScalarWhereInput
    data: XOR<EducationImageUpdateManyMutationInput, EducationImageUncheckedUpdateManyWithoutEducationInput>
  }

  export type EducationImageScalarWhereInput = {
    AND?: EducationImageScalarWhereInput | EducationImageScalarWhereInput[]
    OR?: EducationImageScalarWhereInput[]
    NOT?: EducationImageScalarWhereInput | EducationImageScalarWhereInput[]
    id?: IntFilter<"EducationImage"> | number
    educationId?: IntFilter<"EducationImage"> | number
    imageId?: IntFilter<"EducationImage"> | number
  }

  export type EducationImageCreateWithoutImageInput = {
    education: EducationCreateNestedOneWithoutImagesInput
  }

  export type EducationImageUncheckedCreateWithoutImageInput = {
    id?: number
    educationId: number
  }

  export type EducationImageCreateOrConnectWithoutImageInput = {
    where: EducationImageWhereUniqueInput
    create: XOR<EducationImageCreateWithoutImageInput, EducationImageUncheckedCreateWithoutImageInput>
  }

  export type EducationImageCreateManyImageInputEnvelope = {
    data: EducationImageCreateManyImageInput | EducationImageCreateManyImageInput[]
    skipDuplicates?: boolean
  }

  export type MosquitoImageCreateWithoutImageInput = {
    mosquito: MosquitoCreateNestedOneWithoutImagesInput
  }

  export type MosquitoImageUncheckedCreateWithoutImageInput = {
    id?: number
    mosquitoId: number
  }

  export type MosquitoImageCreateOrConnectWithoutImageInput = {
    where: MosquitoImageWhereUniqueInput
    create: XOR<MosquitoImageCreateWithoutImageInput, MosquitoImageUncheckedCreateWithoutImageInput>
  }

  export type MosquitoImageCreateManyImageInputEnvelope = {
    data: MosquitoImageCreateManyImageInput | MosquitoImageCreateManyImageInput[]
    skipDuplicates?: boolean
  }

  export type EducationImageUpsertWithWhereUniqueWithoutImageInput = {
    where: EducationImageWhereUniqueInput
    update: XOR<EducationImageUpdateWithoutImageInput, EducationImageUncheckedUpdateWithoutImageInput>
    create: XOR<EducationImageCreateWithoutImageInput, EducationImageUncheckedCreateWithoutImageInput>
  }

  export type EducationImageUpdateWithWhereUniqueWithoutImageInput = {
    where: EducationImageWhereUniqueInput
    data: XOR<EducationImageUpdateWithoutImageInput, EducationImageUncheckedUpdateWithoutImageInput>
  }

  export type EducationImageUpdateManyWithWhereWithoutImageInput = {
    where: EducationImageScalarWhereInput
    data: XOR<EducationImageUpdateManyMutationInput, EducationImageUncheckedUpdateManyWithoutImageInput>
  }

  export type MosquitoImageUpsertWithWhereUniqueWithoutImageInput = {
    where: MosquitoImageWhereUniqueInput
    update: XOR<MosquitoImageUpdateWithoutImageInput, MosquitoImageUncheckedUpdateWithoutImageInput>
    create: XOR<MosquitoImageCreateWithoutImageInput, MosquitoImageUncheckedCreateWithoutImageInput>
  }

  export type MosquitoImageUpdateWithWhereUniqueWithoutImageInput = {
    where: MosquitoImageWhereUniqueInput
    data: XOR<MosquitoImageUpdateWithoutImageInput, MosquitoImageUncheckedUpdateWithoutImageInput>
  }

  export type MosquitoImageUpdateManyWithWhereWithoutImageInput = {
    where: MosquitoImageScalarWhereInput
    data: XOR<MosquitoImageUpdateManyMutationInput, MosquitoImageUncheckedUpdateManyWithoutImageInput>
  }

  export type MosquitoImageScalarWhereInput = {
    AND?: MosquitoImageScalarWhereInput | MosquitoImageScalarWhereInput[]
    OR?: MosquitoImageScalarWhereInput[]
    NOT?: MosquitoImageScalarWhereInput | MosquitoImageScalarWhereInput[]
    id?: IntFilter<"MosquitoImage"> | number
    mosquitoId?: IntFilter<"MosquitoImage"> | number
    imageId?: IntFilter<"MosquitoImage"> | number
  }

  export type EducationCreateWithoutImagesInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EducationUncheckedCreateWithoutImagesInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EducationCreateOrConnectWithoutImagesInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutImagesInput, EducationUncheckedCreateWithoutImagesInput>
  }

  export type ImageCreateWithoutEducationsInput = {
    imagePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MosquitoImage?: MosquitoImageCreateNestedManyWithoutImageInput
  }

  export type ImageUncheckedCreateWithoutEducationsInput = {
    id?: number
    imagePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MosquitoImage?: MosquitoImageUncheckedCreateNestedManyWithoutImageInput
  }

  export type ImageCreateOrConnectWithoutEducationsInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutEducationsInput, ImageUncheckedCreateWithoutEducationsInput>
  }

  export type EducationUpsertWithoutImagesInput = {
    update: XOR<EducationUpdateWithoutImagesInput, EducationUncheckedUpdateWithoutImagesInput>
    create: XOR<EducationCreateWithoutImagesInput, EducationUncheckedCreateWithoutImagesInput>
    where?: EducationWhereInput
  }

  export type EducationUpdateToOneWithWhereWithoutImagesInput = {
    where?: EducationWhereInput
    data: XOR<EducationUpdateWithoutImagesInput, EducationUncheckedUpdateWithoutImagesInput>
  }

  export type EducationUpdateWithoutImagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUpsertWithoutEducationsInput = {
    update: XOR<ImageUpdateWithoutEducationsInput, ImageUncheckedUpdateWithoutEducationsInput>
    create: XOR<ImageCreateWithoutEducationsInput, ImageUncheckedCreateWithoutEducationsInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutEducationsInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutEducationsInput, ImageUncheckedUpdateWithoutEducationsInput>
  }

  export type ImageUpdateWithoutEducationsInput = {
    imagePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MosquitoImage?: MosquitoImageUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateWithoutEducationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    imagePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MosquitoImage?: MosquitoImageUncheckedUpdateManyWithoutImageNestedInput
  }

  export type MosquitoCreateWithoutImagesInput = {
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MosquitoUncheckedCreateWithoutImagesInput = {
    id?: number
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MosquitoCreateOrConnectWithoutImagesInput = {
    where: MosquitoWhereUniqueInput
    create: XOR<MosquitoCreateWithoutImagesInput, MosquitoUncheckedCreateWithoutImagesInput>
  }

  export type ImageCreateWithoutMosquitoImageInput = {
    imagePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    educations?: EducationImageCreateNestedManyWithoutImageInput
  }

  export type ImageUncheckedCreateWithoutMosquitoImageInput = {
    id?: number
    imagePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    educations?: EducationImageUncheckedCreateNestedManyWithoutImageInput
  }

  export type ImageCreateOrConnectWithoutMosquitoImageInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutMosquitoImageInput, ImageUncheckedCreateWithoutMosquitoImageInput>
  }

  export type MosquitoUpsertWithoutImagesInput = {
    update: XOR<MosquitoUpdateWithoutImagesInput, MosquitoUncheckedUpdateWithoutImagesInput>
    create: XOR<MosquitoCreateWithoutImagesInput, MosquitoUncheckedCreateWithoutImagesInput>
    where?: MosquitoWhereInput
  }

  export type MosquitoUpdateToOneWithWhereWithoutImagesInput = {
    where?: MosquitoWhereInput
    data: XOR<MosquitoUpdateWithoutImagesInput, MosquitoUncheckedUpdateWithoutImagesInput>
  }

  export type MosquitoUpdateWithoutImagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MosquitoUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUpsertWithoutMosquitoImageInput = {
    update: XOR<ImageUpdateWithoutMosquitoImageInput, ImageUncheckedUpdateWithoutMosquitoImageInput>
    create: XOR<ImageCreateWithoutMosquitoImageInput, ImageUncheckedCreateWithoutMosquitoImageInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutMosquitoImageInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutMosquitoImageInput, ImageUncheckedUpdateWithoutMosquitoImageInput>
  }

  export type ImageUpdateWithoutMosquitoImageInput = {
    imagePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    educations?: EducationImageUpdateManyWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateWithoutMosquitoImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    imagePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    educations?: EducationImageUncheckedUpdateManyWithoutImageNestedInput
  }

  export type MosquitoImageCreateWithoutMosquitoInput = {
    image: ImageCreateNestedOneWithoutMosquitoImageInput
  }

  export type MosquitoImageUncheckedCreateWithoutMosquitoInput = {
    id?: number
    imageId: number
  }

  export type MosquitoImageCreateOrConnectWithoutMosquitoInput = {
    where: MosquitoImageWhereUniqueInput
    create: XOR<MosquitoImageCreateWithoutMosquitoInput, MosquitoImageUncheckedCreateWithoutMosquitoInput>
  }

  export type MosquitoImageCreateManyMosquitoInputEnvelope = {
    data: MosquitoImageCreateManyMosquitoInput | MosquitoImageCreateManyMosquitoInput[]
    skipDuplicates?: boolean
  }

  export type MosquitoImageUpsertWithWhereUniqueWithoutMosquitoInput = {
    where: MosquitoImageWhereUniqueInput
    update: XOR<MosquitoImageUpdateWithoutMosquitoInput, MosquitoImageUncheckedUpdateWithoutMosquitoInput>
    create: XOR<MosquitoImageCreateWithoutMosquitoInput, MosquitoImageUncheckedCreateWithoutMosquitoInput>
  }

  export type MosquitoImageUpdateWithWhereUniqueWithoutMosquitoInput = {
    where: MosquitoImageWhereUniqueInput
    data: XOR<MosquitoImageUpdateWithoutMosquitoInput, MosquitoImageUncheckedUpdateWithoutMosquitoInput>
  }

  export type MosquitoImageUpdateManyWithWhereWithoutMosquitoInput = {
    where: MosquitoImageScalarWhereInput
    data: XOR<MosquitoImageUpdateManyMutationInput, MosquitoImageUncheckedUpdateManyWithoutMosquitoInput>
  }

  export type UserCreateWithoutSurveyInput = {
    username: string
    name?: string | null
    email?: string | null
    password: string
    status?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutSurveyInput = {
    id?: number
    username: string
    name?: string | null
    email?: string | null
    password: string
    status?: boolean
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutSurveyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSurveyInput, UserUncheckedCreateWithoutSurveyInput>
  }

  export type HealthCenterCreateWithoutSurveyInput = {
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HealthCenterUncheckedCreateWithoutSurveyInput = {
    id?: number
    name: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HealthCenterCreateOrConnectWithoutSurveyInput = {
    where: HealthCenterWhereUniqueInput
    create: XOR<HealthCenterCreateWithoutSurveyInput, HealthCenterUncheckedCreateWithoutSurveyInput>
  }

  export type UserUpsertWithoutSurveyInput = {
    update: XOR<UserUpdateWithoutSurveyInput, UserUncheckedUpdateWithoutSurveyInput>
    create: XOR<UserCreateWithoutSurveyInput, UserUncheckedCreateWithoutSurveyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSurveyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSurveyInput, UserUncheckedUpdateWithoutSurveyInput>
  }

  export type UserUpdateWithoutSurveyInput = {
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutSurveyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthCenterUpsertWithoutSurveyInput = {
    update: XOR<HealthCenterUpdateWithoutSurveyInput, HealthCenterUncheckedUpdateWithoutSurveyInput>
    create: XOR<HealthCenterCreateWithoutSurveyInput, HealthCenterUncheckedCreateWithoutSurveyInput>
    where?: HealthCenterWhereInput
  }

  export type HealthCenterUpdateToOneWithWhereWithoutSurveyInput = {
    where?: HealthCenterWhereInput
    data: XOR<HealthCenterUpdateWithoutSurveyInput, HealthCenterUncheckedUpdateWithoutSurveyInput>
  }

  export type HealthCenterUpdateWithoutSurveyInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthCenterUncheckedUpdateWithoutSurveyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyCreateManyUserInput = {
    id?: number
    healthCenterId: number
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SurveyUpdateWithoutUserInput = {
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    healthCenter?: HealthCenterUpdateOneRequiredWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    healthCenterId?: IntFieldUpdateOperationsInput | number
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    healthCenterId?: IntFieldUpdateOperationsInput | number
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyCreateManyHealthCenterInput = {
    id?: number
    userId: number
    nama_lengkap_responden: string
    kelurahan: string
    rt: string
    rw: string
    jumlah_anggota_keluarga: number
    jumlah_penampungan_air: number
    jumlah_jentik: number
    jenis_penampungan_dirumah: string
    jenis_penampungan_diluar: string
    kuras_penampungan_air: string
    terkena_dbd: string
    bukti_gambar: string
    catatan: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SurveyUpdateWithoutHealthCenterInput = {
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateWithoutHealthCenterInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyUncheckedUpdateManyWithoutHealthCenterInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    nama_lengkap_responden?: StringFieldUpdateOperationsInput | string
    kelurahan?: StringFieldUpdateOperationsInput | string
    rt?: StringFieldUpdateOperationsInput | string
    rw?: StringFieldUpdateOperationsInput | string
    jumlah_anggota_keluarga?: IntFieldUpdateOperationsInput | number
    jumlah_penampungan_air?: IntFieldUpdateOperationsInput | number
    jumlah_jentik?: IntFieldUpdateOperationsInput | number
    jenis_penampungan_dirumah?: StringFieldUpdateOperationsInput | string
    jenis_penampungan_diluar?: StringFieldUpdateOperationsInput | string
    kuras_penampungan_air?: StringFieldUpdateOperationsInput | string
    terkena_dbd?: StringFieldUpdateOperationsInput | string
    bukti_gambar?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationImageCreateManyEducationInput = {
    id?: number
    imageId: number
  }

  export type EducationImageUpdateWithoutEducationInput = {
    image?: ImageUpdateOneRequiredWithoutEducationsNestedInput
  }

  export type EducationImageUncheckedUpdateWithoutEducationInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type EducationImageUncheckedUpdateManyWithoutEducationInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type EducationImageCreateManyImageInput = {
    id?: number
    educationId: number
  }

  export type MosquitoImageCreateManyImageInput = {
    id?: number
    mosquitoId: number
  }

  export type EducationImageUpdateWithoutImageInput = {
    education?: EducationUpdateOneRequiredWithoutImagesNestedInput
  }

  export type EducationImageUncheckedUpdateWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
  }

  export type EducationImageUncheckedUpdateManyWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
  }

  export type MosquitoImageUpdateWithoutImageInput = {
    mosquito?: MosquitoUpdateOneRequiredWithoutImagesNestedInput
  }

  export type MosquitoImageUncheckedUpdateWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    mosquitoId?: IntFieldUpdateOperationsInput | number
  }

  export type MosquitoImageUncheckedUpdateManyWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    mosquitoId?: IntFieldUpdateOperationsInput | number
  }

  export type MosquitoImageCreateManyMosquitoInput = {
    id?: number
    imageId: number
  }

  export type MosquitoImageUpdateWithoutMosquitoInput = {
    image?: ImageUpdateOneRequiredWithoutMosquitoImageNestedInput
  }

  export type MosquitoImageUncheckedUpdateWithoutMosquitoInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }

  export type MosquitoImageUncheckedUpdateManyWithoutMosquitoInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}